{
  "en": {
    "CHANGELOG": {
      "title": "Changelog",
      "sections": [
        {
          "id": "changelog",
          "title": "Changelog",
          "level": 1,
          "content": [],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "3014-2025-06-21",
          "title": "[3.0.14] - 2025-06-21",
          "level": 2,
          "content": [
            {
              "type": "heading",
              "data": {
                "text": "🐛 Fixed",
                "level": 3,
                "id": "-fixed"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Logger Middleware: Fixed issue with dispatcher logger not displaying properly formatted output",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 14,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "3013-2024-12-xx",
          "title": "[3.0.13] - 2024-12-XX",
          "level": 2,
          "content": [
            {
              "type": "heading",
              "data": {
                "text": "✨ Added",
                "level": 3,
                "id": "-added"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Enhanced Watcher System: Added startWithCurrentValue option to createWatcher() for controlling initial value emission",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Control whether watchers emit current state value immediately upon subscription",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Useful for module synchronization and component initialization scenarios",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Backwards compatible - defaults to false for safe behavior",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "🛠 Improved",
                "level": 3,
                "id": "-improved"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "ESM-Only Build: Migrated to ESM-only distribution for modern JavaScript ecosystem",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Removed CommonJS build to reduce bundle size and complexity",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Improved tree shaking and static analysis capabilities",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Faster builds and smaller library footprint",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Breaking Change: Node.js 14+ required with \"type\": \"module\" in package.json",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "📖 Usage Examples",
                "level": 3,
                "id": "-usage-examples"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Watcher with immediate current value emission\nwatchCurrentUserProfile: createWatcher({\n  type: 'watchCurrentUserProfile',\n  selector: (state) => state.currentUserProfile?.user_info,\n  shouldTrigger: (prev, curr) => JSON.stringify(prev) !== JSON.stringify(curr),\n  startWithCurrentValue: true, // Emit current value on subscription\n  meta: { description: 'Sync user profile between modules' },\n})\n\n// Watcher for tracking only changes (default behavior)\nwatchUserActions: createWatcher({\n  type: 'watchUserActions', \n  selector: (state) => state.user.lastAction,\n  shouldTrigger: (prev, curr) => prev?.id !== curr?.id,\n  startWithCurrentValue: false, // Only emit on changes (default)\n  meta: { description: 'Track new user actions only' },\n})",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "🚨 Breaking Changes",
                "level": 3,
                "id": "-breaking-changes"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "ESM-Only: Library now requires modern JavaScript environment",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Node.js 14+ with ESM support",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Modern bundlers (Webpack 5+, Vite, Rollup)",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Update your package.json to include \"type\": \"module\"",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 117,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "3012-2024-12-27",
          "title": "[3.0.12] - 2024-12-27",
          "level": 2,
          "content": [
            {
              "type": "heading",
              "data": {
                "text": "✨ Added",
                "level": 3,
                "id": "-added"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Storage Status Tracking: Monitor initialization progress with onStatusChange() and waitForReady()",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Dependency Management: Control synapse initialization order with dependencies property",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "EventBus: New createEventBus() utility for decoupled communication between modules",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Configuration Validation: Comprehensive validation with detailed error messages",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "🛠 Improved",
                "level": 3,
                "id": "-improved"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Enhanced error handling during storage initialization",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Better TypeScript support and type inference",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Improved cleanup and memory management",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "📖 Usage Examples",
                "level": 3,
                "id": "-usage-examples"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Status tracking\nconst storage = new MemoryStorage(config)\nstorage.onStatusChange(status => console.log(status.status))\nawait storage.initialize()\n\n// Dependencies\nconst synapse = await createSynapse({\n  dependencies: [coreSynapse], // Wait for dependencies\n  // ... config\n})\n\n// EventBus\nconst eventBus = await createEventBus({ name: 'app-events' })\neventBus.dispatcher.publish({ event: 'USER_UPDATED', data: {...} })",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 60,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udc1b Fixed",
        "Added",
        "\udee0 Improved",
        "\udcd6 Usage Examples",
        "\udea8 Breaking Changes",
        "Added",
        "\udee0 Improved",
        "\udcd6 Usage Examples"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-26T05:25:01.416Z",
        "wordCount": 368,
        "readingTime": 2,
        "sectionsCount": 4,
        "codeBlocksCount": 2
      }
    },
    "README": {
      "title": "Synapse Storage",
      "sections": [
        {
          "id": "synapse-storage",
          "title": "Synapse Storage",
          "level": 1,
          "content": [
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "🇺🇸 English | 🇷🇺 Русский | 🏠 ChangeLog",
                      "formatting": {
                        "bold": [
                          {
                            "start": 0,
                            "end": 12
                          }
                        ],
                        "italic": [],
                        "code": [],
                        "links": [
                          {
                            "start": 15,
                            "end": 27,
                            "url": "./docs/ru/README.md",
                            "title": null
                          },
                          {
                            "start": 30,
                            "end": 42,
                            "url": "./CHANGELOG.md",
                            "title": null
                          }
                        ]
                      }
                    }
                  }
                ],
                "emoji": "\ud83c"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "State management toolkit + API client",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "\n\n\n",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": [
                    {
                      "start": 0,
                      "end": 0,
                      "url": "https://badge.fury.io/js/synapse-storage",
                      "title": null
                    },
                    {
                      "start": 1,
                      "end": 1,
                      "url": "https://bundlephobia.com/package/synapse-storage",
                      "title": null
                    },
                    {
                      "start": 2,
                      "end": 2,
                      "url": "https://www.typescriptlang.org/",
                      "title": null
                    },
                    {
                      "start": 3,
                      "end": 3,
                      "url": "https://rxjs.dev/",
                      "title": null
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "wordCount": 14,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "key-features",
          "title": "✨ Key Features",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Framework Agnostic - You can use Synapse with any framework or independently",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 21
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "💾 Various Storage Adapters - Memory, LocalStorage, IndexedDB",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 27
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🧮 Different Ways to Access Data - Computed values with memoization",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 32
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Ability to create Redux-style computed selectors",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Ability to directly subscribe to specific properties in storage",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Ability to subscribe to reactive state",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 API Client Creation - HTTP client with caching capabilities (Similar to RTK Query)",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 22
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚛️ React - Several convenient hooks for React",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 8
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ RxJS - Ability to create Redux-Observable style effects",
                        "formatting": {
                          "bold": [
                            {
                              "start": 2,
                              "end": 6
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Custom Middleware Support - Ability to extend storage functionality with custom middlewares",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 28
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔌 Custom Plugin Support - Ability to extend storage functionality with custom plugins",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 24
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 110,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "author",
          "title": "Author",
          "level": 2,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Vladislav — Senior Frontend Developer (React, TypeScript)",
                "formatting": {
                  "bold": [
                    {
                      "start": 0,
                      "end": 9
                    }
                  ],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "heading",
                    "data": {
                      "text": "🔎 Currently looking for new career opportunities!",
                      "level": 3,
                      "id": "-currently-looking-for-new-career-opportunities"
                    }
                  },
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "GitHub | LinkedIn",
                      "formatting": {
                        "bold": [],
                        "italic": [],
                        "code": [],
                        "links": [
                          {
                            "start": 0,
                            "end": 6,
                            "url": "https://github.com/Vlad92msk/",
                            "title": null
                          },
                          {
                            "start": 9,
                            "end": 17,
                            "url": "https://www.linkedin.com/in/vlad-firsov/",
                            "title": null
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 17,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "ps-not-recommended-for-production-use-yet-as-i-develop-this-in-my-free-time-the-library-works-in-general-but-i-can-provide-guarantees-only-after-full-integration-into-my-pet-project-social-network-this-wont-happen-before-changing-my-current-workplace-and-country-of-residence",
          "title": "PS: Not recommended for production use yet as I develop this in my free time.\nThe library works in general, but I can provide guarantees only after full integration into my pet project - Social Network.\nThis won't happen before changing my current workplace and country of residence",
          "level": 2,
          "content": [],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "installation",
          "title": "📦 Installation",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "bash",
                "code": "npm install synapse-storage",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "bash",
                "code": "# For reactive capabilities\nnpm install rxjs\n\n# For React integration  \nnpm install react react-dom\n\n# All at once for full functionality\nnpm install synapse-storage rxjs react react-dom",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 2,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "requirements",
          "title": "Requirements",
          "level": 2,
          "content": [
            {
              "type": "heading",
              "data": {
                "text": "Dependencies",
                "level": 3,
                "id": "dependencies"
              }
            },
            {
              "type": "table",
              "data": {
                "headers": [
                  "Module",
                  "Description",
                  "Dependencies"
                ],
                "rows": [
                  {
                    "cells": [
                      "Module",
                      "Description",
                      "Dependencies"
                    ],
                    "type": "header"
                  },
                  {
                    "cells": [
                      "synapse-storage/core",
                      "base",
                      "-"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "synapse-storage/react",
                      "React",
                      "React 18+"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "synapse-storage/reactive",
                      "RxJS",
                      "RxJS 7.8.2+"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "synapse-storage/api",
                      "HTTP client",
                      "-"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "synapse-storage/utils",
                      "Utils",
                      "-"
                    ],
                    "type": "data"
                  }
                ]
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "💡 Tip: Import only the modules you need for optimal bundle size",
                      "formatting": {
                        "bold": [
                          {
                            "start": 0,
                            "end": 7
                          }
                        ],
                        "italic": [],
                        "code": [],
                        "links": []
                      }
                    }
                  }
                ],
                "emoji": "\ud83d"
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "tsconfig.json:",
                "level": 3,
                "id": "tsconfigjson"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "json",
                "code": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"ES2022\", \n    \"moduleResolution\": \"bundler\"\n  }\n}",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 35,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": true,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "documentation",
          "title": "📚 Documentation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Main",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Basic Usage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🧮 Redux-style Computed Selectors",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 33,
                              "url": "./redux-selectors.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 API Client",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 13,
                              "url": "./api-client.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Reactive Approach",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "⚡ Creating Dispatcher",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": [
                                {
                                  "start": 0,
                                  "end": 21,
                                  "url": "./create-dispatcher.md",
                                  "title": null
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "⚡ Creating Effects",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": [
                                {
                                  "start": 0,
                                  "end": 18,
                                  "url": "./create-effects.md",
                                  "title": null
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "⚡ Creating Effects Module",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": [
                                {
                                  "start": 0,
                                  "end": 25,
                                  "url": "./create-effects-module.md",
                                  "title": null
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ createSynapse Utility",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔌 Creating Custom Plugins",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 26,
                              "url": "./custom-plugins.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Creating Custom Middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 30,
                              "url": "./custom-middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📋 Additional",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 13,
                              "url": "./additional.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 40,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "examples",
          "title": "🎯 Examples",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "GitHub",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 6,
                              "url": "https://github.com/Vlad92msk/synapse-examples",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "YouTube",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "https://www.youtube.com/channel/UCGENI_i4qmBkPp98P2HvvGw",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 2,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "modular-usage",
          "title": "Modular Usage",
          "level": 2,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Don't need everything? Import only what you use:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "table",
              "data": {
                "headers": [
                  "Use Case",
                  "Import",
                  "Size",
                  "Comparison"
                ],
                "rows": [
                  {
                    "cells": [
                      "Use Case",
                      "Import",
                      "Size",
                      "Comparison"
                    ],
                    "type": "header"
                  },
                  {
                    "cells": [
                      "Basic state",
                      "synapse-storage/core",
                      "~42KB",
                      "vs Redux: 45KB"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "+ HTTP client",
                      "+ /api",
                      "+13KB",
                      "vs React Query: 39KB"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "+ Reactive",
                      "+ /reactive",
                      "+8KB",
                      "vs Redux-Observable: 25KB"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "+ React hooks",
                      "+ /react",
                      "+5KB",
                      "vs Custom hooks"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "Full package",
                      "all modules",
                      "~171KB",
                      "vs 109KB stack + custom"
                    ],
                    "type": "data"
                  }
                ]
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "🎯 Result: Similar or better performance with unified API and TypeScript support out of the box",
                      "formatting": {
                        "bold": [
                          {
                            "start": 0,
                            "end": 10
                          }
                        ],
                        "italic": [],
                        "code": [],
                        "links": []
                      }
                    }
                  }
                ],
                "emoji": "\ud83c"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// 📦 Minimal project - storage only\nimport { MemoryStorage } from 'synapse-storage/core'        // 42KB\n\n// 📦 + Add HTTP client when needed  \nimport { ApiClient } from 'synapse-storage/api'             // +13KB\n\n// 📦 + Add reactive effects when required\nimport { createDispatcher } from 'synapse-storage/reactive' // +8KB\n\n// 📦 + Add React hooks for UI\nimport { useSelector } from 'synapse-storage/react'         // +5KB",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "🔧 Or Create Your Own Implementation",
                "level": 3,
                "id": "-or-create-your-own-implementation"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Use core + your solutions\nimport { IStorage } from 'synapse-storage/core'\n\n// Implement your HTTP client\nclass MyApiClient { /* your logic */ }\n\n// Implement your SelectorModule\nclass MySelectorModule { /* your logic */ }\n\n// Implement your React hooks  \nconst useMyCustomHook = () => { /* your logic */ }",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "You can use the storage from synapse-storage as a foundation and (if necessary):",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Implement your own computed selectors module",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Implement your own reactivity",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "🎨 Constructor Approach Benefits",
                "level": 3,
                "id": "-constructor-approach-benefits"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Quick Start - begin with core, add modules as project grows",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📦 Optimal Bundle - don't pay for unused functionality",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔄 Flexibility - replace any module with your implementation",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ Compatibility - modules work independently but integrate perfectly",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📈 Scalability - from simple state to full-featured architecture",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 154,
            "codeBlocksCount": 2,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": true,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "Key Features",
        "RxJS: Ability to create Redux-Observable style effects",
        "\udce6 Installation",
        "\udcda Documentation",
        "\udfaf Examples",
        "\udd27 Or Create Your Own Implementation",
        "\udfa8 Constructor Approach Benefits"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-18T06:01:28.055Z",
        "wordCount": 725,
        "readingTime": 4,
        "sectionsCount": 9,
        "codeBlocksCount": 5
      }
    },
    "additional": {
      "title": "Additional",
      "sections": [
        {
          "id": "additional",
          "title": "Additional",
          "level": 1,
          "content": [
            {
              "type": "divider",
              "data": {}
            },
            {
              "type": "paragraph",
              "data": {
                "text": "In progress",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 2,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Navigation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Home",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "../../README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 All documentation sections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 29,
                              "url": "../../README.md#-documentation",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "All sections:",
                "level": 3,
                "id": "all-sections"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Basic usage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🧮 Redux-style computed selectors",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 33,
                              "url": "./redux-selectors.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 API client",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 13,
                              "url": "./api-client.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Dispatcher",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 21,
                              "url": "./create-dispatcher.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Effects",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 18,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Effects Module",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-effects-module.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ createSynapse utility",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔌 Creating custom plugins",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 26,
                              "url": "./custom-plugins.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Creating custom middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 30,
                              "url": "./custom-middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 41,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Navigation"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-08T12:12:09.578Z",
        "wordCount": 70,
        "readingTime": 1,
        "sectionsCount": 2,
        "codeBlocksCount": 0
      }
    },
    "api-client": {
      "title": "API Client",
      "sections": [
        {
          "id": "api-client",
          "title": "API Client",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Synapse includes an API client with caching support:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const api = new ApiClient({\n  // Request caching configuration\n  cacheableHeaderKeys: ['X-Auth-Token'],\n  storage: API, // Pass ready storage instance\n  // Cache settings\n  cache: {\n    ttl: 5 * 60 * 1000, // Cache lifetime: 5 minutes\n    invalidateOnError: true, // Cache invalidation on error\n    cleanup: {\n      enabled: true, // Periodic cache cleanup\n      interval: 10 * 60 * 1000, // Cleanup interval: 10 minutes\n    },\n  },\n  // Base request settings\n  baseQuery: {\n    baseUrl: 'https://api.example.com',\n    timeout: 10000, // 10 seconds\n    prepareHeaders: async (headers, context) => {\n      // Setting headers\n      headers.set('X-Auth-Token', 'some-token');\n      // Getting data from storage or cookies\n      const token = context.getCookie('token');\n      if (token) {\n        headers.set('Authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n    credentials: 'same-origin',\n  },\n  // Endpoint definitions\n  endpoints: async (create) => ({\n    getData: create({\n      request: (params, context) => ({\n        path: '/data',\n        method: 'GET',\n        query: params,\n      }),\n      // Can specify endpoint-specific cache settings\n      cache: {\n        ttl: 60 * 1000, // 1 minute for this endpoint\n      },\n    }),\n  }),\n});\n\n// Initialization\nconst myApi = await api.init();\n\n// Usage with subscription to request state\nconst request = myApi.getEndpoints().getData.request({ id: 1 }, {\n  // Can pass additional properties to context\n  context: {\n    someKey: 'someValue',\n  },\n  // Can disable cache for specific call\n  // disableCache: true,\n  // Can specify headers that will participate in key formation (override all other settings)\n  // cacheableHeaderKeys: ['header-key'],\n  // etc...\n  // Some aspects are still being refined\n});\n\n// Option 1: Subscribe to request state changes\nrequest.subscribe((state) => {\n  switch (state.status) {\n    case 'idle':\n      console.log('Request is inactive');\n      break;\n    case 'loading':\n      console.log('Loading data...');\n      break;\n    case 'success':\n      console.log('Data received:', state.data);\n      break;\n    case 'error':\n      console.log('Error:', state.error);\n      break;\n  }\n});\n\n// Option 2: Wait for request result\nconst response = await request.wait();\n\n// Option 3: Wait with callbacks for different states\nawait request.waitWithCallbacks({\n  loading: () => console.log('Loading...'),\n  success: (data) => console.log('Data:', data),\n  error: (error) => console.error('Error:', error),\n});",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 8,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Navigation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Home",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "../../README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 All documentation sections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 29,
                              "url": "../../README.md#-documentation",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Related sections:",
                "level": 3,
                "id": "related-sections"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Basic usage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Effects",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 18,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ createSynapse utility",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 17,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Navigation"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:53:10.598Z",
        "wordCount": 347,
        "readingTime": 2,
        "sectionsCount": 2,
        "codeBlocksCount": 1
      }
    },
    "basic-usage": {
      "title": "Basic Usage",
      "sections": [
        {
          "id": "basic-usage",
          "title": "Basic Usage",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Imports:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Tools for creating and managing storage\nimport {\n  // Storage types\n  MemoryStorage,\n  IndexedDBStorage,\n  LocalStorage,\n\n  // Storage interfaces\n  IStorage,\n\n  // Storage middleware\n  broadcastMiddleware,\n\n  // For creating custom storage plugins\n  StoragePluginModule,\n  IStoragePlugin,\n  PluginContext,\n  StorageKeyType,\n\n  // For creating custom storage middlewares\n  Middleware,\n  MiddlewareAPI,\n  NextFunction,\n\n  // Module for creating Redux-style computed selectors\n  SelectorModule,\n  ISelectorModule\n} from 'synapse-storage/core'\n\n// Tools for reactive approach (somewhat similar to Redux-Observable)\nimport { \n  // Tools for creating Dispatcher\n  createDispatcher,\n  loggerDispatcherMiddleware,\n\n  // Tools for creating Effects (similar to Redux-Observable)\n  EffectsModule, \n  combineEffects, \n  createEffect,\n  ofType,\n  ofTypes,\n  selectorMap,\n  validateMap\n} from 'synapse-storage/reactive';\n\n// Tools for working with API\nimport { ApiClient, ResponseFormat } from 'synapse-storage/api'\n\n// Several tools for convenient use in React\nimport { useStorageSubscribe, useSelector, createSynapseCtx } from 'synapse-storage/react'\n\nimport { createSynapse } from 'synapse-storage/utils'",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 1,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "creating-storage",
          "title": "Creating Storage",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const counter1 = await new MemoryStorage<Counter>({\n  name: 'counter1',\n  initialState: {\n    value: 100,\n  },\n}).initialize()",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const counter2 = await new LocalStorage<Counter>({\n  name: 'counter2',\n  initialState: { value: 100 },\n}).initialize()",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const { counter3 } = await IndexedDBStorage.createStorages<{ counter3: Counter }>(\n  'example1', // Database name in indexDB\n  // Tables:\n  {\n    counter3: {\n      name: 'counter3',\n      initialState: { value: 99 },\n      // eventEmitter: ,\n      // initialState: ,\n      // middlewares: ,\n      // pluginExecutor: ,\n    },\n    // Other objects (storages in current database)\n  }\n)",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 3,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "ways-to-change-values-main",
          "title": "Ways to Change Values (Main)",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "    const updateCounter1 = async () => {\n        await counter1.update((state) => {\n            state.value = state.value + 1\n        })\n    }\n\n    const updateCounter2 = async () => {\n        await counter2.set('value', counter2ValueSelectorValue! + 1)\n    }\n\n    const updateCounter3 = async () => {\n        counter3.set('value', counter3ValueSelectorValue! + 1)\n    }",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "creating-subscriptions",
          "title": "Creating Subscriptions",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "jsx",
                "code": "const [counter1Value, setCounter1Value] = useState(0)\nconst [counter2Value, setCounter2Value] = useState(0)\n\n\nuseEffect(() => {\n  // Subscription via callback\n  counter1.subscribe((state) => state.value, (value) => {\n    setCounter1Value(value)\n  })\n  // Subscription via path (can be like 'user.settings.theme')\n  counter2.subscribe('value', (value) => {\n    setCounter2Value(value)\n  })\n\n  // Subscribe to all events\n  counter1.subscribeToAll((event) => {\n    console.log('event', event)\n    // Here we get an object:\n    // changedPaths:['value'] // all paths where changes were made (['prop1.prop2', 'prop44.prop.555.prop.666'])\n    // key:['value'] // Root keys in storage where changes occurred\n    // type:\"storage:update\" // Operation type\n    // value: {value: 101} // New state\n  })\n}, [])\n// For React via special selector\nconst counter3Value = useStorageSubscribe(counter3, (state) => state.value)",
                "meta": null
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "💡 Tip:\nWhen creating subscriptions using subscribe or subscribeToAll, it's better not to forget to call the unsubscribe function",
                      "formatting": {
                        "bold": [
                          {
                            "start": 0,
                            "end": 7
                          }
                        ],
                        "italic": [],
                        "code": [],
                        "links": []
                      }
                    }
                  }
                ],
                "emoji": "\ud83d"
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 19,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Navigation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Home",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "../../README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 All documentation sections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 29,
                              "url": "../../README.md#-documentation",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Related sections:",
                "level": 3,
                "id": "related-sections"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🧮 Redux-style computed selectors",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 33,
                              "url": "./redux-selectors.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ createSynapse utility",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 17,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Navigation"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:54:29.826Z",
        "wordCount": 431,
        "readingTime": 3,
        "sectionsCount": 5,
        "codeBlocksCount": 6
      }
    },
    "create-dispatcher": {
      "title": "Creating dispatcher",
      "sections": [
        {
          "id": "creating-dispatcher",
          "title": "Creating dispatcher",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "The dispatcher is needed to create a reactive state",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { createDispatcher, loggerDispatcherMiddleware } from 'synapse-storage/reactive'\nimport { PokemonStorage } from '../storages/pokemon.storage'\nimport { createPokemonAlertMiddleware } from '../middlewares/pokenon.middlewares'\nimport { Pokemon } from '../types'\n\n// const myWorker = new Worker('path-to-my-worker')\n\nexport interface AlertPayload {\n  message: string\n  type: 'info' | 'warning' | 'error' | 'success'\n  duration?: number // Display duration in milliseconds\n}\n\n// Function to create dispatcher\nexport function createPokemonDispatcher(storage: PokemonStorage) {\n  // Create middleware: logger\n    const loggerMiddleware = loggerDispatcherMiddleware({\n        collapsed: true, // Collapse groups in consoles for compactness\n        colors: {\n            title: '#3498db', // Custom blue color for header\n        },\n        duration: true,      // Execution time\n        diff: true,          // Show full status\n        showFullState: true, // Show full state\n        // Custom interface translations\n        translations: {\n            action: '',\n            changesCount: '',\n            diff: '',\n            duration: '',\n            error: '',\n            //...\n        }\n    })\n\n  // Create middleware: alertM (just for example)\n  const alertM = createPokemonAlertMiddleware()\n\n  return createDispatcher({\n    storage,\n    middlewares: [loggerMiddleware, alertM],\n  }, (storage, { createWatcher, createAction }) => ({\n    // watchers\n    watchCurrentId: createWatcher({\n      type: 'watchCurrentId',\n      selector: (state) => state.currentId,\n      shouldTrigger: (prev, curr) => prev !== curr,\n      notifyAfterSubscribe: false, // Only changes (default)\n      meta: { description: 'Track current Pokemon changes' },\n    }),\n\n    // Watches user profile for synchronization\n    watchUserProfile: createWatcher({\n      type: 'watchUserProfile',\n      selector: (state) => state.userProfile,\n      shouldTrigger: (prev, curr) => JSON.stringify(prev) !== JSON.stringify(curr),\n      notifyAfterSubscribe: true, // Emit on subscription for sync\n      meta: { description: 'Synchronize profile between modules' },\n    }),\n    // Events\n    loadPokemon: createAction<number, { id: number }>({...}),\n    loadPokemonRequest: createAction<number, { id: number }>({...}),\n    // Successful data retrieval\n    success: createAction<{ data?: Pokemon}, { data?: Pokemon }>({...}, {\n      // Memoization function (not tested yet)\n      // memoize: (currentArgs: any[], previousArgs: any[], previousResult: any) => true,\n      // Web worker for action execution (not tested yet)\n      // worker: myWorker,\n    }),\n    failure: createAction<Error, { err: Error }>({...}),\n    next: createAction<void, { id: number }>({...}),\n    prev: createAction<void, { id: number }>({...}),\n    showAlert: createAction<AlertPayload, void>({...}),\n  }))\n  // Alternative way to add:\n  // .use(logger)\n  // .use(alertM)\n}\n\n// Export dispatcher type\nexport type PokemonDispatcher = ReturnType<typeof createPokemonDispatcher>",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 9,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Navigation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Home",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "../../README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 All documentation sections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 29,
                              "url": "../../README.md#-documentation",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Related sections:",
                "level": 3,
                "id": "related-sections"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Effects",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 18,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Effects Module",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-effects-module.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ createSynapse utility",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Creating custom middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 30,
                              "url": "./custom-middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 22,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Navigation"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:58:13.089Z",
        "wordCount": 373,
        "readingTime": 2,
        "sectionsCount": 2,
        "codeBlocksCount": 1
      }
    },
    "create-effects-module": {
      "title": "Creating Effects Module",
      "sections": [
        {
          "id": "creating-effects-module",
          "title": "Creating Effects Module",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "The effects module (EffectsModule) allows you to create reactive effects for handling actions and states without using the createSynapse utility. This is useful when you need more detailed control over effects configuration.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [
                    {
                      "start": 20,
                      "end": 33
                    },
                    {
                      "start": 123,
                      "end": 136
                    }
                  ],
                  "links": []
                }
              }
            }
          ],
          "metadata": {
            "wordCount": 32,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "prerequisites",
          "title": "Prerequisites",
          "level": 2,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "To create an effects module, we need ready-made components:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Creating Storage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 19,
                              "url": "./basic-usage.md#creating-storage",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Dispatcher",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 21,
                              "url": "./create-dispatcher.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Effects",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 18,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 API Client (optional)",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 13,
                              "url": "./api-client.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 22,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "creating-effects-module",
          "title": "Creating Effects Module",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { EffectsModule } from 'synapse-storage/reactive'\n\n// 1. Create storage\nconst storage = await new MemoryStorage<PokemonState>({...}).initialize()\n\n// 2. Get computed selectors (optional)\nconst selectors = new SelectorModule(storage)\n\n// 3. Create dispatcher\nconst dispatcher = createDispatcher({ storage }, (...) => ({...}))\n\n// 4. Prepare external states (other EffectsModule.state$)\nconst externalStates = {\n  userState$: userEffectsModule.state$,\n  settingsState$: settingsEffectsModule.state$\n}\n\n// 5. Create effects module\nconst effectsModule = new EffectsModule(\n  storage,                             // State storage\n  externalStates,                      // External states (state$ from other modules)\n  { pokemonDispatcher: dispatcher },   // Object with dispatchers\n  { pokemonApi },                      // Object with API/services\n  { apiTimeout: 5000 }                 // Configuration for effects/project\n)\n\n// 6. Add combined effects\neffectsModule.add(pokemonEffects)\n\n// 7. Start effects\neffectsModule.start()\n\n// 8. Get state stream\nconst state$ = effectsModule.state$",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "linking-modules",
          "title": "Linking Modules",
          "level": 2,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "The main feature - externalStates is state$ from other EffectsModule:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [
                    {
                      "start": 19,
                      "end": 33
                    },
                    {
                      "start": 37,
                      "end": 43
                    },
                    {
                      "start": 55,
                      "end": 68
                    }
                  ],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Base modules\nconst userModule = new EffectsModule(userStorage, {}, { userDispatcher }, {}, {})\nconst settingsModule = new EffectsModule(settingsStorage, {}, { settingsDispatcher }, {}, {})\n\nuserModule.start()\nsettingsModule.start()\n\n// Main module uses base module states\nconst pokemonModule = new EffectsModule(\n  pokemonStorage,\n  {\n    userState$: userModule.state$,        // 👈 state$ from another module\n    settingsState$: settingsModule.state$ // 👈 state$ from another module\n  },\n  { pokemonDispatcher },\n  { pokemonApi },\n  {}\n)\n\npokemonModule.add(pokemonEffects).start()",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 10,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "usage-in-effects",
          "title": "Usage in Effects",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const crossModuleEffect = createEffect((action$, state$, externalStates, dispatchers, api) =>\n  action$.pipe(\n    ofType(dispatchers.pokemonDispatcher.dispatch.loadPokemon),\n    withLatestFrom(\n      externalStates.userState$,    // 👈 Data from userModule\n      externalStates.settingsState$ // 👈 Data from settingsModule\n    ),\n    switchMap(([action, userState, settingsState]) => {\n      // Use data from other modules\n      return from(api.pokemonApi.fetchPokemon({\n        id: action.payload.id,\n        userId: userState.id,\n        lang: settingsState.language\n      }))\n    })\n  )\n)",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "lifecycle-management",
          "title": "Lifecycle Management",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Adding effects at runtime\neffectsModule.add(newEffect)\n\n// Stop\neffectsModule.stop()\n\n// Clean up resources\nawait storage.destroy()",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "when-to-use",
          "title": "When to Use",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Detailed control over initialization",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Complex multi-level state systems",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Modular architecture with independent domains",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Integration with existing systems",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 17,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Navigation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Home",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "../../README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 All documentation sections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 29,
                              "url": "../../README.md#-documentation",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Related sections:",
                "level": 3,
                "id": "related-sections"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Dispatcher",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 21,
                              "url": "./create-dispatcher.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Effects",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 18,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ createSynapse utility",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Basic usage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 20,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Navigation"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:55:40.146Z",
        "wordCount": 410,
        "readingTime": 3,
        "sectionsCount": 8,
        "codeBlocksCount": 4
      }
    },
    "create-effects": {
      "title": "Creating Effects",
      "sections": [
        {
          "id": "creating-effects",
          "title": "Creating Effects",
          "level": 1,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { EMPTY, from, mapTo, of, tap } from 'rxjs'\nimport { catchError, map, switchMap } from 'rxjs/operators'\n\nimport {\n  ofType,           // Listens to 1 event\n  ofTypes,          // Listens to multiple events\n  createEffect,     // Effect creation function\n  combineEffects,   // Combines multiple effects into one\n  selectorMap,      // State selection using selectors (returns array)\n  selectorObject,   // State selection using selectors (returns object)\n  validateMap       // Operator for convenient request handling\n} from 'synapse-storage/reactive'\nimport { pokemonEndpoints } from '../api/pokemon.api'\nimport { AppConfig } from '../app.config'\nimport { PokemonDispatcher } from '../pokemon.dispatcher'\nimport { Pokemon, PokemonState } from '../types'\n\n// Define types for our effects\ntype DispatcherType = {\n  pokemonDispatcher: PokemonDispatcher \n}\ntype ApiType = { \n  pokemonApi: typeof pokemonEndpoints \n}\ntype ExternalStorages = {\n  core$: typeof coreSynapseIDB.state$\n}\n\ntype Effect = ReturnType<typeof createEffect<\n  AboutUserUserInfo,    // Current storage type\n  DispatcherType,       // Dispatcher types\n  ApiType,              // API types\n  Record<string, void>, // Configuration type\n  ExternalStorages     // External storage stream types\n>>\n\n// Navigation effect\nexport const navigationEffect: Effect = createEffect((action$, state$, externalStorages, { pokemonDispatcher }, _, config) =>\n  action$.pipe(\n    ofTypes([pokemonDispatcher.dispatch.next, pokemonDispatcher.dispatch.prev]),\n    switchMap((action) => {\n      const { id } = action.payload\n      return of(() => pokemonDispatcher.dispatch.loadPokemon(id))\n    }),\n  ),\n)\n\n// Effect for tracking ID changes\nexport const watchIdEffect: Effect = createEffect((action$, state$, externalStorages, { pokemonDispatcher }) =>\n  action$.pipe(\n    ofType(pokemonDispatcher.watchers.watchCurrentId),\n    withLatestFrom(\n          selectorMap(state$,\n            (state) => state.value\n          //... selectors\n        ),\n    ),\n    mapTo(null),\n  ),\n)\n\n// Effect for loading pokemon data\nexport const loadPokemonEffect: Effect = createEffect((\n  action$,                // Event stream \n  state$,                 // State stream\n  externalStorages,       // External storage streams\n  { pokemonDispatcher },  // Dispatchers we passed\n  { pokemonApi },         // Various APIs we passed\n  config                   // Configuration we passed\n  ) =>\n  action$.pipe(\n    // I use separate action loadPokemon which notifies about intention to make request\n    // To avoid setting loading immediately\n    ofType(pokemonDispatcher.dispatch.loadPokemon),\n    withLatestFrom(\n      selectorMap(state$, (s) => s.currentId, (s) => s.currentId),           // |\n      selectorMap(pokemon1State$, (s) => s.currentId, (s) => s.currentId),   // | receives stream and selectors, returns array with results\n      selectorMap(pokemon1State$, (s) => s.currentId),                       // |\n      selectorObject(state$, {                                     // |\n        currentId: (s) => s.currentId,                             // | receives stream and returns object with results (for each property, function is called with state of this stream)\n        name: (s) => s.currentPokemon?.sprites,                    // |\n      }),\n    ),\n    validateMap({\n      apiCall: ([action, [currentId], [externalId, externalId2], [external2Id], externalData]) => {\n        const { id } = action.payload\n\n        return from(\n          // Use waitWithCallbacks to have access to loading method\n          pokemonApi.fetchPokemonById.request({ id }).waitWithCallbacks({\n            // Called only when request is actually sent, not taken from cache\n            loading: (request) => {\n              // At this moment loading will be set and other necessary logic\n              pokemonDispatcher.dispatch.loadPokemonRequest(id)\n            },\n            // Can be used like this:\n            // success: (data, request) => {\n            //   console.log('SUCCESS', request)\n            //   pokemonDispatcher.dispatch.success({ data })\n            // },\n            // error: (error, request) => {\n            //   console.log('ERROR', error, request)\n            //   pokemonDispatcher.dispatch.failure(error!)\n            // },\n          }),\n          // Can use more standard way:\n        ).pipe(\n          switchMap(({ data }) => {\n            return of(pokemonDispatcher.dispatch.success({ data }))\n          }),\n          catchError((err) => of(pokemonDispatcher.dispatch.failure(err))),\n        )\n      },\n    }),\n  ),\n)\n\n// Combine all effects into one and export\nexport const pokemonEffects = combineEffects(\n  navigationEffect,\n  watchIdEffect,\n  loadPokemonEffect\n)",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Navigation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Home",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "../../README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 All documentation sections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 29,
                              "url": "../../README.md#-documentation",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Related sections:",
                "level": 3,
                "id": "related-sections"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Dispatcher",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 21,
                              "url": "./create-dispatcher.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Effects Module",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-effects-module.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 API client",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 13,
                              "url": "./api-client.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ createSynapse utility",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 21,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Navigation"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:55:36.313Z",
        "wordCount": 540,
        "readingTime": 3,
        "sectionsCount": 2,
        "codeBlocksCount": 1
      }
    },
    "create-synapse": {
      "title": "Code Organization Example and createSynapse Utility Usage",
      "sections": [
        {
          "id": "code-organization-example-and-createsynapse-utility-usage",
          "title": "Code Organization Example and createSynapse Utility Usage",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "The createSynapse utility is just a wrapper over all modules that connects them into a single whole.\nYou can make your own if it's more convenient.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Suggested file structure",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "md",
                "code": "📦some-directory\n└── 📂synapses\n│    └── 📂core\n│    │    ├── 📄core.dispatcher.ts\n│    │    ├── 📄core.synapse.ts\n│    │    └── ...\n│    └── 📂user-info\n│    │    ├── 📄user-info.context.tsx\n│    │    ├── 📄user-info.dispatcher.ts\n│    │    ├── 📄user-info.effects.ts\n│    │    ├── 📄user-info.selectors.ts\n│    │    ├── 📄user-info.store.ts\n│    │    └── 📄user-info.synapse.ts\n│    └──...\n│\n└── 📄indexdb.config.ts",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.store.ts\n// === CREATING STORAGE OF NEEDED TYPE ===\nexport async function createUserInfoStorage() {\n  return new MemoryStorage<AboutUserUserInfo>({\n    name: 'user-info',\n    initialState: {\n      userInfoInit: undefined,\n      isChangeActive: false,\n      fieldsInit: {},\n      fields: {},\n    },\n  }).initialize()\n}",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.dispatcher.ts\n// === CREATING DISPATCHER ===\n\nimport { IStorage } from 'synapse-storage/core'\nimport { createDispatcher, loggerDispatcherMiddleware } from 'synapse-storage/reactive'\n\nexport function createUserInfoDispatcher(store: IStorage<AboutUserUserInfo>) {\n  const loggerMiddleware = loggerDispatcherMiddleware({...})\n\n  return createDispatcher({ storage: store }, (storage, { createAction, createWatcher }) => ({\n    setCurrentUserProfile: createAction<UserProfileInfo, UserProfileInfo>({\n      type: 'setCurrentUserProfile',\n      // meta: ,\n      // action: async () => {...}),\n    }),\n\n    setActiveChange: createAction<void, void>({\n      type: 'setActiveChange',\n      // meta: ,\n      // action: async () => {...}),\n    })\n  // Other dispatchers ...\n  })).use(loggerMiddleware)\n}\n\nexport type UserInfoDispatcher = ReturnType<typeof createUserInfoDispatcher>",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.selectors.ts\n// === CREATING SELECTORS ===\nimport { ISelectorModule } from 'synapse-storage/core'\n\nexport const createUserInfoSelectors = (selectorModule: ISelectorModule<AboutUserUserInfo>) => {\n  const currentUserProfile = selectorModule.createSelector((s) => s.userInfoInit)\n  const fieldsInit = selectorModule.createSelector((s) => s.fieldsInit)\n\n  const isChangeActive = selectorModule.createSelector((s) => s.isChangeActive)\n\n  const fields = selectorModule.createSelector((s) => s.fields)\n  // For React\n  // Component will re-render whenever the value returned by selector changes\n  // To reduce re-renders, I recommend creating specific selectors\n  // If you have a separate component for displaying information - better create a separate selector for it\n  const fieldInformation = selectorModule.createSelector((s) => s.fields.information)\n  const fieldPosition = selectorModule.createSelector((s) => s.fields.position)\n  //...\n\n  return ({\n    currentUserProfile,\n    isChangeActive,\n    //...\n  })\n}",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.effects.ts\n// === CREATING EFFECTS ===\nimport { EMPTY, from, of } from 'rxjs'\nimport { catchError, map } from 'rxjs/operators'\nimport { combineEffects, createEffect, ofType, validateMap } from 'synapse-storage/reactive'\n\ntype CurrentDispatchers = {\n  userInfoDispatcher: UserInfoDispatcher\n  coreIdbDispatcher: CoreDispatcher\n};\ntype CurrentApis = {\n  userInfoAPi: typeof userInfoEndpoints\n};\ntype ExternalStorages = {\n}\n\ntype Effect = ReturnType<typeof createEffect<\n  AboutUserUserInfo,     // Current storage type\n  CurrentDispatchers,       // Dispatcher types\n  CurrentApis,              // API types\n  Record<string, void>, // Configuration type\n  ExternalStorages     // External storage stream types\n>>\n\n/**\n * Add received user profile to current store\n */\nconst loadUserInfoById: Effect = createEffect((action$, state$, { userInfoDispatcher, coreIdbDispatcher }) => action$.pipe(\n  // Subscribe to changes in external Synapse\n  ofType(coreIdbDispatcher.watchers.watchCurrentUserProfile),\n  map((s) => {\n    if (!s.payload) return EMPTY\n    // Take data from external Synapse and put it in current one\n    return userInfoDispatcher.dispatch.setCurrentUserProfile(s.payload)\n  }),\n))\n\nconst updateUserProfile: Effect = createEffect((action$, state$, { userInfoDispatcher }, { userInfoAPi }) => action$.pipe(\n  ofType(userInfoDispatcher.dispatch.submit),\n  validateMap({\n    // Validation before request\n    validator: (action) => ({\n      skipAction: userInfoDispatcher.dispatch.reset(),\n      conditions: [Boolean(action.payload)]\n    }),\n    apiCall: (action) => {\n      return from(\n        userInfoAPi.getUserById.request({ user_id: 1 }).waitWithCallbacks({\n          // Called only when request is actually sent, not taken from cache\n          loading: (request) => {\n            // At this moment loading will be set and other necessary logic\n            // userInfoDispatcher.dispatch.request(id)\n          },\n          // Can be used like this:\n          success: (data, request) => {\n            // userInfoDispatcher.dispatch.success({ data })\n          },\n          error: (error, request) => {\n            // userInfoDispatcher.dispatch.failure(error!)\n          },\n        }),\n      )\n    },\n  }),\n))\n\nexport const userInfoEffects = combineEffects(\n  loadUserInfoById,\n  updateUserProfile,\n)\n",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.synapse.ts\n// === CREATING Synapse ===\nimport { createSynapse } from 'synapse-storage/utils'\nimport { createUserInfoDispatcher } from './user-info.dispatcher'\nimport { userInfoEffects } from './user-info.effects'\nimport { createUserInfoSelectors } from './user-info.selectors'\nimport { createUserInfoStorage } from './user-info.store'\nimport { userInfoEndpoints } from '../../api/user-info.api'\nimport { coreSynapseIDB } from '../core/core.synapse'\n\nexport const userInfoSynapse = await createSynapse({\n  dependencies: [coreSynapseIDB], // Wait for coreSynapseIDB to initialize\n  // Pass storage\n  // This can be \n  // 1 - Function that returns ready storage\n  createStorageFn: createUserInfoStorage,\n  // 2 - Class for creating storage (initialize() will be called inside)\n  // storage: new MemoryStorage<AboutUserUserInfo>({\n  //   name: 'user-info',\n  //   initialState: {\n  //     userInfoInit: undefined,\n  //     isChangeActive: false,\n  //     fieldsInit: {},\n  //     fields: {},\n  //   },\n  // }),\n  // Dispatcher creation function (Optional)\n  createDispatcherFn: createUserInfoDispatcher,\n  // Selector creation function (Optional)\n  createSelectorsFn: createUserInfoSelectors,\n  // External selectors (Optional)\n  externalSelectors: {\n    // externalSelectors1: ...\n  },\n  // Configuration for effects (Optional)\n  createEffectConfig: (userInfoDispatcher) => ({\n    // Dispatchers for effects\n    dispatchers: {\n      userInfoDispatcher,                           // Current one, for managing own storage\n      coreIdbDispatcher: coreSynapseIDB.dispatcher, // External one, for interaction with external storage\n      //...\n    },\n    // Additional API at your discretion (for me these are API Clients)\n    api: {\n      userInfoAPi: userInfoEndpoints,\n    },\n    // External states as streams that we want to use in effects\n    externalStates: {\n      pokemonState$: pokemon1State$,\n      core$: coreSynapseIDB.state$,\n    },\n  }),\n  // Effects that will be started for this synapse\n  effects: [userInfoEffects],\n})",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "tsx",
                "code": "// user-info.context.tsx\n// === CREATING React Context ===\nimport { createSynapseCtx } from 'synapse-storage/react'\nimport { userInfoSynapse } from './user-info.synapse'\n\n// Get all necessary tools for working in component\nexport const {\n  contextSynapse: useUserInfoContextSynapse,\n  useSynapseActions: useUserInfoSynapseActions,\n  useSynapseSelectors: useUserInfoSynapseSelectors,\n  useSynapseState$: useUserInfoSynapseState$,\n  useSynapseStorage: useUserInfoSynapseStorage,\n  cleanupSynapse: useUserInfoCleanupSynapse,\n} = createSynapseCtx(\n    // Pass Synapse itself\n    userInfoSynapse,\n    {\n      loadingComponent: <div>loading</div>, // Pass component that will be displayed during initialization loading\n      // mergeFn: // Function for merging passed parameters into initialState (deep copy is performed by default)\n    },\n)",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "This way you can separate functionality into layers",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 37,
            "codeBlocksCount": 7,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "connecting-synapse-to-each-other",
          "title": "Connecting Synapse to Each Other",
          "level": 2,
          "content": [
            {
              "type": "heading",
              "data": {
                "text": "📊 Regular Connection via Dependencies",
                "level": 3,
                "id": "-regular-connection-via-dependencies"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "As shown in the example above - you can connect synapses simply by passing them in the dependencies array",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.synapse.ts\n// === CREATING Synapse ===\nimport { createSynapse } from 'synapse-storage/utils'\nimport { createUserInfoDispatcher } from './user-info.dispatcher'\nimport { userInfoEffects } from './user-info.effects'\nimport { createUserInfoSelectors } from './user-info.selectors'\nimport { createUserInfoStorage } from './user-info.store'\nimport { userInfoEndpoints } from '../../api/user-info.api'\nimport { coreSynapseIDB } from '../core/core.synapse'\n\nexport const currentSynapse = await createSynapse({\n  dependencies: [someSynapse1, someSynapse2, someSynapse3], // Will wait for initialization of everything it depends on\n  //...\n})",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "In this case, the overall schema will look like this:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "diagram",
              "data": {
                "code": "graph TD\n    Core((Core<br/>Synapse))\n    UserInfo((UserInfo<br/>Synapse))\n    Posts((Posts<br/>Synapse))\n    Settings((Settings<br/>Synapse))\n\n    Core --> UserInfo\n    Core --> Posts\n    Core --> Settings\n"
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "📡 EventBus Pattern (Advanced)",
                "level": 3,
                "id": "-eventbus-pattern-advanced"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "EventBus pattern is an alternative way to connect synapses to each other\nIts main advantages are reducing coupling between modules and avoiding circular dependency problems when you need to connect two modules in both directions",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "In this case, the overall schema will look like this:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "diagram",
              "data": {
                "code": "graph TD\n    EventBus((EventBus<br/>Synapse))\n    Auth((Auth<br/>Synapse))\n    User((User<br/>Synapse))\n    Notifications((Notifications<br/>Synapse))\n\n    Auth -.-> EventBus\n    User -.-> EventBus\n    Notifications -.-> EventBus\n    EventBus -.-> Auth\n    EventBus -.-> User\n    EventBus -.-> Notifications\n"
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "⚙️ EventBus Configuration",
                "level": 3,
                "id": "-eventbus-configuration"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const appEventBus = await createEventBus({\n  name: 'app-events',        // Name for debugging and logging\n  autoCleanup: true,         // Automatic cleanup of old events\n  maxEvents: 500            // Maximum number of events in memory\n})",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "🔧 Main Methods",
                "level": 4,
                "id": "-main-methods"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "publish() - publish event with data and metadata",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "subscribe() - subscribe to events with pattern support ('USER_', '')",
                        "formatting": {
                          "bold": [],
                          "italic": [
                            {
                              "start": 62,
                              "end": 66
                            }
                          ],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "getEventHistory() - get event history for specific event type",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "clearEvents() - clear events (all or older than specific time)",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "getActiveSubscriptions() - list of active subscriptions",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "💡 Practical Tips",
                "level": 4,
                "id": "-practical-tips"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Event naming: use 'MODULE_ACTION' format (e.g., 'USER_LOGGED_IN', 'ORDER_CREATED')",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Patterns: 'USER_' for all user events, '' for global monitoring",
                        "formatting": {
                          "bold": [],
                          "italic": [
                            {
                              "start": 16,
                              "end": 40
                            }
                          ],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Priorities: 'high' for critical events, 'normal' for regular, 'low' for logging",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Creating EventBus using utility\nimport { createEventBus } from 'synapse-storage/utils'\n\nexport const appEventBus = await createEventBus({\n  name: 'app-events',\n  autoCleanup: true,\n  maxEvents: 500\n})\n\n// auth.synapse.ts\nexport const authSynapse = await createSynapse({\n  dependencies: [appEventBus], // Connect EventBus\n  createEffectConfig: (authDispatcher) => ({\n    dispatchers: {\n      authDispatcher,\n      eventBus: appEventBus.dispatcher\n    }\n  }),\n  effects: [\n    // Effect to publish events on successful authentication\n    createEffect((action$, state$, _, { authDispatcher, eventBus }) => \n      action$.pipe(\n        ofType(authDispatcher.dispatch.loginSuccess),\n        map(action => \n          eventBus.dispatch.publish({\n            event: 'USER_LOGGED_IN',\n            data: action.payload,\n            metadata: { priority: 'high' }\n          })\n        )\n      )\n    )\n  ]\n})\n\n// user.synapse.ts\nexport const userSynapse = await createSynapse({\n  dependencies: [appEventBus], // Connect EventBus\n  createEffectConfig: (userDispatcher) => ({\n    dispatchers: {\n      userDispatcher,\n      eventBus: appEventBus.dispatcher\n    }\n  }),\n  effects: [\n    // Effect to subscribe to auth events\n    createEffect((action$, state$, _, { userDispatcher, eventBus }) => {\n      // Subscribe to user login events\n      eventBus.dispatch.subscribe({\n        eventPattern: 'USER_*', // Pattern support\n        handler: (userData, event) => {\n          if (event.event === 'USER_LOGGED_IN') {\n            userDispatcher.dispatch.loadUserProfile(userData.id)\n          }\n        },\n        options: { priority: 'high' } // Priority filtering\n      })\n      \n      return EMPTY // This effect only sets up subscription\n    })\n  ]\n})\n\n// notifications.synapse.ts\nexport const notificationsSynapse = await createSynapse({\n  dependencies: [appEventBus],\n  createEffectConfig: (notificationsDispatcher) => ({\n    dispatchers: {\n      notificationsDispatcher,\n      eventBus: appEventBus.dispatcher\n    }\n  }),\n  effects: [\n    // Subscribe to all events to show notifications\n    createEffect((action$, state$, _, { notificationsDispatcher, eventBus }) => {\n      eventBus.dispatch.subscribe({\n        eventPattern: '*', // Listen to all events\n        handler: (data, event) => {\n          notificationsDispatcher.dispatch.showNotification({\n            message: `Event: ${event.event}`,\n            data\n          })\n        }\n      })\n      \n      return EMPTY\n    })\n  ]\n})",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "🎯 Advantages of Each Approach",
                "level": 3,
                "id": "-advantages-of-each-approach"
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "Dependencies (Regular)",
                "level": 4,
                "id": "dependencies-regular"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Easy to understand",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Direct connections between modules",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ TypeScript typing out of the box",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "❌ Tight coupling between modules",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "❌ Complexity with large number of connections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "EventBus (Advanced)",
                "level": 4,
                "id": "eventbus-advanced"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Loose coupling between modules",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Easy to add new modules",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Centralized event management",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Ability to debug all events in one place",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Event pattern support ('USER_', '')",
                        "formatting": {
                          "bold": [],
                          "italic": [
                            {
                              "start": 31,
                              "end": 35
                            }
                          ],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Filtering by priority and metadata",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Automatic cleanup of old events",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "❌ Complexity in tracking data flow",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "❌ Need for manual event typing",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 255,
            "codeBlocksCount": 3,
            "diagramsCount": 2,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Navigation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Home",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 All documentation sections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 29,
                              "url": "./README.md#-documentation",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Related sections:",
                "level": 3,
                "id": "related-sections"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Basic Usage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Dispatcher",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 21,
                              "url": "./create-dispatcher.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Creating Effects",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 18,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🧮 Redux-style Computed Selectors",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 33,
                              "url": "./redux-selectors.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 API Client",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 13,
                              "url": "./api-client.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 24,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcca Regular Connection via Dependencies",
        "\udce1 EventBus Pattern (Advanced)",
        "️ EventBus Configuration",
        "\udd27 Main Methods",
        "\udca1 Practical Tips",
        "\udfaf Advantages of Each Approach",
        "\udcda Navigation"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:46:02.701Z",
        "wordCount": 1604,
        "readingTime": 9,
        "sectionsCount": 3,
        "codeBlocksCount": 10
      }
    },
    "custom-middlewares": {
      "title": "Creating Custom Middlewares",
      "sections": [
        {
          "id": "creating-custom-middlewares",
          "title": "Creating Custom Middlewares",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Synapse provides two systems for extending functionality: middlewares and plugins. They serve different roles and have different scopes of application.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Middlewares in Synapse work on the principle of \"handler chain\" and allow intercepting any storage operations. Each middleware can modify actions before and after their processing by the base storage.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "Middleware Execution Order",
                "level": 3,
                "id": "middleware-execution-order"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Middlewares are executed in the order they are declared in the array:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Action goes through all middlewares from top to bottom",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Then the base storage operation is executed",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Result goes through middlewares from bottom to top",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                }
              ]
            },
            {
              "type": "code",
              "data": {
                "language": "text",
                "code": "Action → BroadcastMiddleware → ShallowCompare → Batching → Base Operation\nResult ← BroadcastMiddleware ← ShallowCompare ← Batching ← Base Operation",
                "meta": null
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "⚠️ Important: Middleware order matters!",
                      "formatting": {
                        "bold": [],
                        "italic": [],
                        "code": [],
                        "links": []
                      }
                    }
                  },
                  {
                    "type": "list",
                    "data": [
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "BroadcastMiddleware should be first for tab synchronization",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      },
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "ShallowCompare optimizes repeated calls",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      },
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "Batching groups operations for performance",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      }
                    ]
                  }
                ],
                "emoji": "⚠"
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "Creating Custom Middleware",
                "level": 4,
                "id": "creating-custom-middleware"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { Middleware } from 'synapse-storage/core';\n\nconst loggingMiddleware = (): Middleware => ({\n  // Unique middleware name\n  name: 'logging',\n  \n  // Initialization when adding middleware to storage\n  setup: (api) => {\n    console.log('Logging middleware initialized');\n  },\n  \n  // Main logic for intercepting and handling actions\n  reducer: (api) => (next) => async (action) => {\n    console.log('Before action:', action);\n    \n    try {\n      // Call next middleware in chain\n      const result = await next(action);\n      \n      console.log('After action:', {\n        action,\n        result,\n      });\n      \n      return result;\n    } catch (error) {\n      console.error('Action error:', error);\n      throw error;\n    }\n  },\n  \n  // Resource cleanup when storage is destroyed\n  cleanup: () => {\n    console.log('Logging middleware cleanup');\n  }\n});",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "I'll add more detailed examples later",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 119,
            "codeBlocksCount": 2,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Navigation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Home",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "../../README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 All documentation sections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 29,
                              "url": "../../README.md#-documentation",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Related sections:",
                "level": 3,
                "id": "related-sections"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔌 Creating custom plugins",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 26,
                              "url": "./custom-plugins.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Basic usage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 17,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Navigation"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:55:49.310Z",
        "wordCount": 294,
        "readingTime": 2,
        "sectionsCount": 2,
        "codeBlocksCount": 2
      }
    },
    "custom-plugins": {
      "title": "Creating Custom Plugins",
      "sections": [
        {
          "id": "creating-custom-plugins",
          "title": "Creating Custom Plugins",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Plugins in Synapse represent a system of storage event handlers with a defined lifecycle. Unlike middlewares, they don't form a chain but work as independent \"observers\" of storage operations.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { IStoragePlugin, StoragePluginModule } from 'synapse-storage/core';\n\n// Create plugin module\nconst plugins = new StoragePluginModule(\n  undefined,      // Parent plugin module (optional)\n  console,        // Logger\n  'appStorage'    // Storage name\n);\n\n// Example validation plugin\nclass ValidationPlugin implements IStoragePlugin {\n  name = 'validation';\n  private validators = new Map();\n  private options: any;\n\n  constructor(options = {}) {\n    this.options = options;\n  }\n\n  // Add validation rule for key\n  addValidator(key, validator) {\n    this.validators.set(key, validator);\n    return this;\n  }\n\n  // Called before saving value\n  async onBeforeSet(value, context) {\n    const { key } = context.metadata || {};\n    \n    if (key && this.validators.has(key)) {\n      const validator = this.validators.get(key);\n      const result = validator(value);\n      \n      if (!result.valid) {\n        if (this.options.throwOnInvalid) {\n          throw new Error(`Validation failed for ${key}: ${result.message}`);\n        }\n        \n        this.options.onValidationError?.(key, value, result.message);\n      }\n    }\n    \n    return value;\n  }\n  \n  // Plugin initialization\n  async initialize() {\n    console.log('Validation plugin initialized');\n  }\n  \n  // Resource cleanup\n  async destroy() {\n    this.validators.clear();\n  }\n}\n\n// Adding plugins to module\nawait plugins.add(new ValidationPlugin({\n  throwOnInvalid: true,\n  onValidationError: (key, value, message) => {\n    console.error(`Validation error: ${message}`);\n  }\n}));\n\n// Creating storage with plugins\nconst storage = await new MemoryStorage(\n  { name: 'app-storage' },\n  plugins  // Pass plugin module\n).initialize();",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "Plugin Lifecycle",
                "level": 4,
                "id": "plugin-lifecycle"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Plugins have the following lifecycle methods:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Initialization: initialize() - called when adding plugin to storage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Storage operations:",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "onBeforeSet / onAfterSet - before/after saving value",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "onBeforeGet / onAfterGet - before/after getting value",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "onBeforeDelete / onAfterDelete - before/after deleting value",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "onClear - when clearing storage",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Destruction: destroy() - called when removing plugin or destroying storage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "When to use middlewares vs plugins?",
                "level": 4,
                "id": "when-to-use-middlewares-vs-plugins"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Middlewares are better for:",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Intercepting all storage operations in one place",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Changing behavior of base storage operations",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Optimization (batching, deduplication)",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Synchronization between storages/tabs",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Plugins are better for:",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Handling specific storage events",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Data validation",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Operation logging",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Implementing business logic related to data storage",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Integration with external services",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "data": {
                "text": "I'll add more detailed examples later",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 142,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Navigation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Home",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "../../README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 All documentation sections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 29,
                              "url": "../../README.md#-documentation",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Related sections:",
                "level": 3,
                "id": "related-sections"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Creating custom middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 30,
                              "url": "./custom-middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Basic usage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 17,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Navigation"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:55:53.973Z",
        "wordCount": 386,
        "readingTime": 2,
        "sectionsCount": 2,
        "codeBlocksCount": 1
      }
    },
    "middlewares": {
      "title": "Middlewares",
      "sections": [
        {
          "id": "middlewares",
          "title": "Middlewares",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Middlewares in Synapse work on the principle of \"handler chain\" and allow intercepting any storage operations. Each middleware can modify actions before and after their processing by the base storage.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const counter1 = await new MemoryStorage<Counter>({\n  name: 'counter1',\n  initialState: {\n    value: 100,\n  },\n  middlewares: () => {\n    const broadcast = broadcastMiddleware({\n      storageType: 'memory',  // <-- Important to specify storage type correctly\n      storageName: 'counter1' // <-- It's recommended to specify storage name correctly\n    })\n    return [broadcast]\n  }\n}).initialize()\n\nconst counter2 = await new LocalStorage<Counter>({\n  name: 'counter2',\n  initialState: { value: 100 },\n  middlewares: (getDefaultMiddleware) => {\n    const { shallowCompare } = getDefaultMiddleware()\n\n    const broadcast = broadcastMiddleware({\n      storageType: 'localStorage',\n      storageName: 'counter2'\n    })\n\n    return [broadcast, shallowCompare()]\n  }\n}).initialize()\n\nconst { counter3 } = await IndexedDBStorage.createStorages<{ counter3: Counter }>(\n  'example1', {\n    counter3: {\n      name: 'counter3',\n      initialState: { value: 99 },\n      middlewares: (getDefaultMiddleware) => {\n        const { batching } = getDefaultMiddleware()\n\n        const broadcast = broadcastMiddleware({\n          storageType: 'indexedDB',\n          storageName: 'counter3'\n        })\n        return [\n          broadcast,\n          batching({\n            batchSize: 20,\n            batchDelay: 200\n          })\n        ]\n      }\n    }\n  }\n)",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "    // Shallow comparison\n    const updateCounter2 = async () => {\n        await counter2.set('value', counter2ValueSelectorValue! + 1) // This will be applied\n        await counter2.set('value', counter2ValueSelectorValue! + 1) // |\n        await counter2.set('value', counter2ValueSelectorValue! + 1) // | Won't be called as payload hasn't changed\n        await counter2.set('value', counter2ValueSelectorValue! + 1) // |\n        await counter2.set('value', counter2ValueSelectorValue! + 1) // |\n    }\n\n    // Batching\n    // !! works only for methods without await\n    const updateCounter3 = async () => {\n        counter3.set('value', counter3ValueSelectorValue! + 1) // | ignored \n        counter3.set('value', counter3ValueSelectorValue! + 1) // | ignored\n        counter3.set('value', counter3ValueSelectorValue! + 1) // | ignored \n        counter3.set('value', counter3ValueSelectorValue! + 1) // | ignored \n        counter3.set('value', counter3ValueSelectorValue! + 10)// | < --- only this will be applied\n    }",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "Middleware Execution Order",
                "level": 3,
                "id": "middleware-execution-order"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Middlewares are executed in the order they are declared in the array:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Action goes through all middlewares from top to bottom",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Then the base storage operation is executed",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Result goes through middlewares from bottom to top",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                }
              ]
            },
            {
              "type": "code",
              "data": {
                "language": "text",
                "code": "Action → BroadcastMiddleware → ShallowCompare → Batching → Base Operation\nResult ← BroadcastMiddleware ← ShallowCompare ← Batching ← Base Operation",
                "meta": null
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "⚠️ Important: Middleware order matters!",
                      "formatting": {
                        "bold": [],
                        "italic": [],
                        "code": [],
                        "links": []
                      }
                    }
                  },
                  {
                    "type": "list",
                    "data": [
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "BroadcastMiddleware should be first for tab synchronization",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      },
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "ShallowCompare optimizes repeated calls",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      },
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "Batching groups operations for performance",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      }
                    ]
                  }
                ],
                "emoji": "⚠"
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 90,
            "codeBlocksCount": 3,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Navigation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Home",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "../../README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 All documentation sections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 29,
                              "url": "../../README.md#-documentation",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Related sections:",
                "level": 3,
                "id": "related-sections"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Basic usage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Creating custom middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 30,
                              "url": "./custom-middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔌 Creating custom plugins",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 26,
                              "url": "./custom-plugins.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 19,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Navigation"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:55:59.779Z",
        "wordCount": 416,
        "readingTime": 3,
        "sectionsCount": 2,
        "codeBlocksCount": 3
      }
    },
    "redux-selectors": {
      "title": "Creating Redux-style Computed Subscriptions",
      "sections": [
        {
          "id": "creating-redux-style-computed-subscriptions",
          "title": "Creating Redux-style Computed Subscriptions",
          "level": 1,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { SelectorModule } from 'synapse-storage/core'\n\nconst counter1Selector = new SelectorModule(counter1)\nconst counter2Selector = new SelectorModule(counter2)\nconst counter3Selector = new SelectorModule(counter3)\n\nconst counter1ValueSelector = counter1Selector.createSelector((s) => s.value)\nconst counter2ValueSelector = counter2Selector.createSelector((s) => s.value)\nconst counter3ValueSelector = counter3Selector.createSelector((s) => s.value)\n\nconst sum = counter3Selector.createSelector(\n  [counter1ValueSelector, counter2ValueSelector, counter3ValueSelector],\n  (a,b,c) => a + b + c,\n  // Optional:\n  // {\n  //   equals: , // Comparison function\n  //   name: 'doubledCountSelector' // Selector name\n  // }\n)",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "getting-values-from-computed-selectors",
          "title": "Getting Values from Computed Selectors",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "jsx",
                "code": "// Native way\n\n// One-time value retrieval\nconst sumValueSelector = sum.select().then(value => value)\n\n// Subscribe to changes\ncounter2ValueSelector.subscribe({\n  notify: (value) => {\n    console.log('counter2ValueSelector', value)\n  }\n})\n\ncounter3ValueSelector.subscribe({\n  notify: (value) => {\n    console.log('counter3ValueSelector', value)\n  }\n})\n\n// For React via special selector\nconst counter1ValueSelectorValue = useSelector(counter1ValueSelector)\nconst counter2ValueSelectorValue = useSelector(counter2ValueSelector)\nconst counter3ValueSelectorValue = useSelector(counter3ValueSelector, \n  // Can specify additional options\n  {\n    initialValue: 99,\n    withLoading: true,\n    equals: (a, b) =>  a !== b\n  })\n// Then get value like this\ncounter3ValueSelectorValue.data\ncounter3ValueSelectorValue.isLoading",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Navigation",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Home",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "../../README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 All documentation sections",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 29,
                              "url": "../../README.md#-documentation",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Related sections:",
                "level": 3,
                "id": "related-sections"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Basic usage",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ createSynapse utility",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 14,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Navigation"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:56:12.883Z",
        "wordCount": 195,
        "readingTime": 1,
        "sectionsCount": 3,
        "codeBlocksCount": 2
      }
    },
    "storage-creation": {
      "title": "Creating Storage",
      "sections": [
        {
          "id": "creating-storage",
          "title": "Creating Storage",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "MemoryStorage",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { IndexedDBStorage, LocalStorage, MemoryStorage } from \"synapse-storage/core\";\n\nconst counter1 = await new MemoryStorage<Counter>({\n  name: 'counter1',\n  initialState: {\n    value: 100,\n  },\n}).initialize()",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "LocalStorage",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const counter2 = await new LocalStorage<Counter>({\n  name: 'counter2',\n  initialState: { value: 100 },\n}).initialize()",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "IndexedDBStorage",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const { counter3 } = await IndexedDBStorage.createStorages<{ counter3: Counter }>(\n  'example1', // Database name in indexDB\n  // Tables:\n  {\n    counter3: {\n      name: 'counter3',\n      initialState: { value: 99 },\n      // eventEmitter: ,\n      // initialState: ,\n      // middlewares: ,\n      // pluginExecutor: ,\n    },\n    // Other objects (storages in current database)\n  }\n)",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 3,
            "codeBlocksCount": 3,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:56:18.312Z",
        "wordCount": 104,
        "readingTime": 1,
        "sectionsCount": 1,
        "codeBlocksCount": 3
      }
    }
  },
  "ru": {
    "CHANGELOG": {
      "title": "Журнал изменений",
      "sections": [
        {
          "id": "changelog",
          "title": "Журнал изменений",
          "level": 1,
          "content": [],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "3014-2025-06-21",
          "title": "[3.0.14] - 2025-06-21",
          "level": 2,
          "content": [
            {
              "type": "heading",
              "data": {
                "text": "🐛 Исправлено",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Логгер Middleware: Исправлена проблема с некорректным отображением логов в диспетчере",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 12,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "3013-2024-12-xx",
          "title": "[3.0.13] - 2024-12-XX",
          "level": 2,
          "content": [
            {
              "type": "heading",
              "data": {
                "text": "✨ Добавлено",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Улучшенная система наблюдателей* Добавлена опция startWithCurrentValue в createWatcher() для управления отправкой начального значения",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Управление тем, отправляют ли наблюдатели текущее значение состояния сразу при подписке",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Полезно для синхронизации модулей и сценариев инициализации компонентов",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Обратная совместимость - по умолчанию false для безопасного поведения",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "🛠 Улучшено",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Сборка только для ESM: Переход на дистрибуцию только ESM для современной экосистемы JavaScript",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Удалена сборка CommonJS для уменьшения размера бандла и сложности",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Улучшены возможности tree shaking и статического анализа",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Более быстрые сборки и меньший размер библиотеки",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Критическое изменение: Требуется Node.js 14+ с \"type\": \"module\" в package.json",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "📖 Примеры использования",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Наблюдатель с немедленной отправкой текущего значения\nwatchCurrentUserProfile: createWatcher({\n  type: 'watchCurrentUserProfile',\n  selector: (state) => state.currentUserProfile?.user_info,\n  shouldTrigger: (prev, curr) => JSON.stringify(prev) !== JSON.stringify(curr),\n  startWithCurrentValue: true, // Отправлять текущее значение при подписке\n  meta: { description: 'Синхронизация профиля пользователя между модулями' },\n})\n\n// Наблюдатель только для отслеживания изменений (поведение по умолчанию)\nwatchUserActions: createWatcher({\n  type: 'watchUserActions', \n  selector: (state) => state.user.lastAction,\n  shouldTrigger: (prev, curr) => prev?.id !== curr?.id,\n  startWithCurrentValue: false, // Отправлять только при изменениях (по умолчанию)\n  meta: { description: 'Отслеживать только новые действия пользователя' },\n})",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "🚨 Критические изменения",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Только ESM: Библиотека теперь требует современную среду JavaScript",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Node.js 14+ с поддержкой ESM",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Современные бандлеры (Webpack 5+, Vite, Rollup)",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Обновите ваш package.json, добавив \"type\": \"module\"",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 122,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "3012-2024-12-27",
          "title": "[3.0.12] - 2024-12-27",
          "level": 2,
          "content": [
            {
              "type": "heading",
              "data": {
                "text": "✨ Добавлено",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Отслеживание статуса хранилища: Мониторинг прогресса инициализации с помощью onStatusChange() и waitForReady()`",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Управление зависимостями: Контроль порядка инициализации синапсов с помощью свойства dependencies",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "EventBus: Новая утилита createEventBus() для слабосвязанной коммуникации между модулями",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Валидация конфигурации: Комплексная валидация с подробными сообщениями об ошибках",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "🛠 Улучшено",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Улучшена обработка ошибок во время инициализации хранилища",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Лучшая поддержка TypeScript и вывод типов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Улучшены очистка и управление памятью",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "📖 Примеры использования",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Отслеживание статуса\nconst storage = new MemoryStorage(config)\nstorage.onStatusChange(status => console.log(status.status))\nawait storage.initialize()\n\n// Зависимости\nconst synapse = await createSynapse({\n  dependencies: [coreSynapse], // Ожидать зависимости\n  // ... конфигурация\n})\n\n// EventBus\nconst eventBus = await createEventBus({ name: 'app-events' })\neventBus.dispatcher.publish({ event: 'USER_UPDATED', data: {...} })",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 64,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udc1b Исправлено",
        "Добавлено",
        "\udee0 Улучшено",
        "\udcd6 Примеры использования",
        "\udea8 Критические изменения",
        "Добавлено",
        "\udee0 Улучшено",
        "\udcd6 Примеры использования"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-26T05:24:30.358Z",
        "wordCount": 377,
        "readingTime": 2,
        "sectionsCount": 4,
        "codeBlocksCount": 2
      }
    },
    "README": {
      "title": "Synapse Storage",
      "sections": [
        {
          "id": "synapse-storage",
          "title": "Synapse Storage",
          "level": 1,
          "content": [
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "🇷🇺 Русский | 🇺🇸 English | 🏠 Журнал изменений",
                      "formatting": {
                        "bold": [
                          {
                            "start": 0,
                            "end": 12
                          }
                        ],
                        "italic": [],
                        "code": [],
                        "links": [
                          {
                            "start": 15,
                            "end": 27,
                            "url": "../../README.md",
                            "title": null
                          },
                          {
                            "start": 30,
                            "end": 49,
                            "url": "../../CHANGELOG.md",
                            "title": null
                          }
                        ]
                      }
                    }
                  }
                ],
                "emoji": "\ud83c"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Набор инструментов для управления состоянием + API-клиент",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "\n\n\n",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": [
                    {
                      "start": 0,
                      "end": 0,
                      "url": "https://badge.fury.io/js/synapse-storage",
                      "title": null
                    },
                    {
                      "start": 1,
                      "end": 1,
                      "url": "https://bundlephobia.com/package/synapse-storage",
                      "title": null
                    },
                    {
                      "start": 2,
                      "end": 2,
                      "url": "https://www.typescriptlang.org/",
                      "title": null
                    },
                    {
                      "start": 3,
                      "end": 3,
                      "url": "https://rxjs.dev/",
                      "title": null
                    }
                  ]
                }
              }
            }
          ],
          "metadata": {
            "wordCount": 16,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "key-features",
          "title": "✨ Ключевые особенности",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Не зависит от фреймворка - Вы можете использовать Synapse в контексте любого фреймворка или независимо от него",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 27
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "💾 Разнообразные адаптеры хранилищ - Memory, LocalStorage, IndexedDB",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 34
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🧮 Различный способ получения данных - Computed values with memoization",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 36
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Возможность создания вычисляемых селекторов в стиле Redux",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Возможность прямой подписки на конкретное свойство в хранилище",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Возможность подписки на реактивное состояние",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 Создание API клиентов - HTTP клиент с возможностью кэширования (Похож на RTK Query)",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 24
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚛️ React - Несколько удобных хуков для React",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 8
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ RxJS - Возможность создания эффектов в стиле Redux-Observable",
                        "formatting": {
                          "bold": [
                            {
                              "start": 2,
                              "end": 6
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Поддержка кастомных middleware - Возможность расширения функционала хранилища с помощью кастомных middlewares",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 33
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔌 Поддержка кастомных плагинов - Возможность расширения функционала хранилища с помощью кастомных middlewares",
                        "formatting": {
                          "bold": [
                            {
                              "start": 3,
                              "end": 31
                            }
                          ],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 113,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "author",
          "title": "Автор",
          "level": 2,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Владислав — Senior Frontend Developer (React, TypeScript)",
                "formatting": {
                  "bold": [
                    {
                      "start": 0,
                      "end": 9
                    }
                  ],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "heading",
                    "data": {
                      "text": "🔎 Нахожусь в поиске новых карьерных возможностей!",
                      "level": 3,
                      "id": "-"
                    }
                  },
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "GitHub | LinkedIn",
                      "formatting": {
                        "bold": [],
                        "italic": [],
                        "code": [],
                        "links": [
                          {
                            "start": 0,
                            "end": 6,
                            "url": "https://github.com/Vlad92msk/",
                            "title": null
                          },
                          {
                            "start": 9,
                            "end": 17,
                            "url": "https://www.linkedin.com/in/vlad-firsov/",
                            "title": null
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 17,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "ps-not-recommended-for-production-use-yet-as-i-develop-this-in-my-free-time-the-library-works-in-general-but-i-can-provide-guarantees-only-after-full-integration-into-my-pet-project-social-network-this-wont-happen-before-changing-my-current-workplace-and-country-of-residence",
          "title": "PS: Пока не рекоммендую использовать в production т.к разработкой занимаюсь в свободное время.\nБиблиотека в целом работает, но дать гарантии смогу после полной интеграции ее в свой пет-проект Социальная сеть.\nНо произойдет это не раньше смены моего текущего места работы и страны проживания",
          "level": 2,
          "content": [],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "installation",
          "title": "📦 Установка",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "bash",
                "code": "npm install synapse-storage",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "bash",
                "code": "# Для реактивных возможностей\nnpm install rxjs\n\n# Для React интеграции  \nnpm install react react-dom\n\n# Все сразу для полного функционала\nnpm install synapse-storage rxjs react react-dom",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 2,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "requirements",
          "title": "Требования",
          "level": 2,
          "content": [
            {
              "type": "heading",
              "data": {
                "text": "Зависимости",
                "level": 3,
                "id": ""
              }
            },
            {
              "type": "table",
              "data": {
                "headers": [
                  "Модуль",
                  "Описание",
                  "Зависимости"
                ],
                "rows": [
                  {
                    "cells": [
                      "Модуль",
                      "Описание",
                      "Зависимости"
                    ],
                    "type": "header"
                  },
                  {
                    "cells": [
                      "synapse-storage/core",
                      "base",
                      "-"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "synapse-storage/react",
                      "React",
                      "React 18+"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "synapse-storage/reactive",
                      "RxJS",
                      "RxJS 7.8.2+"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "synapse-storage/api",
                      "HTTP client",
                      "-"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "synapse-storage/utils",
                      "Utils",
                      "-"
                    ],
                    "type": "data"
                  }
                ]
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "💡 Совет: Импортируйте только нужные модули для оптимального размера бандла",
                      "formatting": {
                        "bold": [
                          {
                            "start": 0,
                            "end": 9
                          }
                        ],
                        "italic": [],
                        "code": [],
                        "links": []
                      }
                    }
                  }
                ],
                "emoji": "\ud83d"
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "tsconfig.json:",
                "level": 3,
                "id": "tsconfigjson"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "json",
                "code": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"ES2022\", \n    \"moduleResolution\": \"bundler\"\n  }\n}",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 33,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": true,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "documentation",
          "title": "📚 Документация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Базовое использование",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 24,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🧮 Вычисляемые селекторы в стиле Redux",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 38,
                              "url": "./redux-selectors.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 API-клиент",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 13,
                              "url": "./api-client.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Реактивный подход",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "⚡ Создание Диспетчера",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": [
                                {
                                  "start": 0,
                                  "end": 21,
                                  "url": "./create-dispatcher.md",
                                  "title": null
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "⚡ Создание Эффектов",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": [
                                {
                                  "start": 0,
                                  "end": 19,
                                  "url": "./create-effects.md",
                                  "title": null
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "⚡ Создание Модуля эффектов",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": [
                                {
                                  "start": 0,
                                  "end": 26,
                                  "url": "./create-effects-module.md",
                                  "title": null
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ Утилита createSynapse",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔌 Создание пользовательских плагинов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 37,
                              "url": "./custom-plugins.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Создание пользовательских middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 40,
                              "url": "./custom-middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📋 Дополнительное",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 17,
                              "url": "./additional.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 41,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "examples",
          "title": "🎯 Примеры",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "GitHub",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 6,
                              "url": "https://github.com/Vlad92msk/synapse-examples",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "YouTube",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 7,
                              "url": "https://www.youtube.com/channel/UCGENI_i4qmBkPp98P2HvvGw",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 2,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "modular-usage",
          "title": "Модульное использование",
          "level": 2,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Не нужно всё? Импортируйте только то, что используете:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "table",
              "data": {
                "headers": [
                  "Сценарий использования",
                  "Импорт",
                  "Размер",
                  "Сравнение"
                ],
                "rows": [
                  {
                    "cells": [
                      "Сценарий использования",
                      "Импорт",
                      "Размер",
                      "Сравнение"
                    ],
                    "type": "header"
                  },
                  {
                    "cells": [
                      "Базовое состояние",
                      "synapse-storage/core",
                      "~42KB",
                      "vs Redux: 45KB"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "+ HTTP клиент",
                      "+ /api",
                      "+13KB",
                      "vs React Query: 39KB"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "+ Реактивность",
                      "+ /reactive",
                      "+8KB",
                      "vs Redux-Observable: 25KB"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "+ React хуки",
                      "+ /react",
                      "+5KB",
                      "vs кастомные хуки"
                    ],
                    "type": "data"
                  },
                  {
                    "cells": [
                      "Полный комплект",
                      "все модули",
                      "~171KB",
                      "vs 109KB стек + кастом"
                    ],
                    "type": "data"
                  }
                ]
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "🎯 Результат: Аналогичная или лучшая производительность с единым API и поддержкой TypeScript из коробки",
                      "formatting": {
                        "bold": [
                          {
                            "start": 0,
                            "end": 13
                          }
                        ],
                        "italic": [],
                        "code": [],
                        "links": []
                      }
                    }
                  }
                ],
                "emoji": "\ud83c"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// 📦 Минимальный проект - только хранилище\nimport { MemoryStorage } from 'synapse-storage/core'        // 42KB\n\n// 📦 + Добавить HTTP клиент по необходимости  \nimport { ApiClient } from 'synapse-storage/api'             // +13KB\n\n// 📦 + Добавить реактивные эффекты когда понадобятся\nimport { createDispatcher } from 'synapse-storage/reactive' // +8KB\n\n// 📦 + Добавить React хуки для UI\nimport { useSelector } from 'synapse-storage/react'         // +5KB",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "🔧 Или создайте свою реализацию",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Используйте core + свои решения\nimport { IStorage } from 'synapse-storage/core'\n\n// Реализуйте свой HTTP клиент\nclass MyApiClient { /* ваша логика */ }\n\n// Реализуйте свой SelectorModule\nclass MySelectorModule { /* ваша логика */ }\n\n// Реализуйте свои React хуки  \nconst useMyCustomHook = () => { /* ваша логика */ }",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Вы можете взять за основу хранилище из synapse-storage и (если необходимо):",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Реализовать свой модуль вычисляемых селекторов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Реализовать свою реактивность",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "🎨 Преимущества конструкторного подхода",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Быстрый старт - начните с core, добавляйте модули по мере роста проекта",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📦 Оптимальный бандл - не платите за неиспользуемую функциональность",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔄 Гибкость - замените любой модуль своей реализацией",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ Совместимость - модули работают независимо, но интегрируются идеально",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📈 Масштабируемость - от простого стейта до полноценной архитектуры",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 147,
            "codeBlocksCount": 2,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": true,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "Ключевые особенности",
        "RxJS: Возможность создания эффектов в стиле Redux-Observable",
        "\udce6 Установка",
        "\udcda Документация",
        "\udfaf Примеры",
        "\udd27 Или создайте свою реализацию",
        "\udfa8 Преимущества конструкторного подхода"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-18T06:01:25.305Z",
        "wordCount": 716,
        "readingTime": 4,
        "sectionsCount": 9,
        "codeBlocksCount": 5
      }
    },
    "additional": {
      "title": "Дополниетльно",
      "sections": [
        {
          "id": "additional",
          "title": "Дополниетльно",
          "level": 1,
          "content": [
            {
              "type": "divider",
              "data": {}
            },
            {
              "type": "paragraph",
              "data": {
                "text": "В процессе",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 2,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Навигация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Все разделы документации",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 27,
                              "url": "./README.md#-документация",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Все разделы:",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Базовое использование",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 24,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🧮 Вычисляемые селекторы в стиле Redux",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 38,
                              "url": "./redux-selectors.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 API-клиент",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 13,
                              "url": "./api-client.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Диспетчера",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 21,
                              "url": "./create-dispatcher.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Эффектов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 19,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Модуля эффектов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 26,
                              "url": "./create-effects-module.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ Утилита createSynapse",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔌 Создание пользовательских плагинов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 37,
                              "url": "./custom-plugins.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Создание пользовательских middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 40,
                              "url": "./custom-middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 42,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Навигация"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-08T12:10:53.549Z",
        "wordCount": 71,
        "readingTime": 1,
        "sectionsCount": 2,
        "codeBlocksCount": 0
      }
    },
    "api-client": {
      "title": "API-клиент",
      "sections": [
        {
          "id": "api-client",
          "title": "API-клиент",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Synapse включает в себя API-клиент с поддержкой кеширования:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const api = new ApiClient({\n  // Настройка кеширования запросов\n  cacheableHeaderKeys: ['X-Auth-Token'],\n  storage: API, // Передаем экземпляр готового хранилища\n  // Настройки кеша\n  cache: {\n    ttl: 5 * 60 * 1000, // Время жизни кеша: 5 минут\n    invalidateOnError: true, // Инвалидация кеша при ошибке\n    cleanup: {\n      enabled: true, // Периодическая очистка кеша\n      interval: 10 * 60 * 1000, // Интервал очистки: 10 минут\n    },\n  },\n  // Базовые настройки запроса\n  baseQuery: {\n    baseUrl: 'https://api.example.com',\n    timeout: 10000, // 10 секунд\n    prepareHeaders: async (headers, context) => {\n      // Установка заголовков\n      headers.set('X-Auth-Token', 'some-token');\n      // Получение данных из хранилища или cookies\n      const token = context.getCookie('token');\n      if (token) {\n        headers.set('Authorization', `Bearer ${token}`);\n      }\n      return headers;\n    },\n    credentials: 'same-origin',\n  },\n  // Определение эндпоинтов\n  endpoints: async (create) => ({\n    getData: create({\n      request: (params, context) => ({\n        path: '/data',\n        method: 'GET',\n        query: params,\n      }),\n      // Можно указать специфичные настройки кеша для эндпоинта\n      cache: {\n        ttl: 60 * 1000, // 1 минута для этого эндпоинта\n      },\n    }),\n  }),\n});\n\n// Инициализация\nconst myApi = await api.init();\n\n// Использование с подпиской на состояние запроса\nconst request = myApi.getEndpoints().getData.request({ id: 1 }, {\n  // Можно передать дополнительные свойства в контекст\n  context: {\n    someKey: 'someValue',\n  },\n  // Можно отключить кэш для конкретного вызова\n  // disableCache: true,\n  // Можно указать заголовки, которые будут участвовать в формировании ключа (перетирают все остальные настройки)\n  // cacheableHeaderKeys: ['header-key'],\n  // и тд...\n  // Некоторые аспекты еще будут дорабатываться\n});\n\n// Вариант 1: Подписка на изменения состояния запроса\nrequest.subscribe((state) => {\n  switch (state.status) {\n    case 'idle':\n      console.log('Запрос неактивен');\n      break;\n    case 'loading':\n      console.log('Загрузка данных...');\n      break;\n    case 'success':\n      console.log('Данные получены:', state.data);\n      break;\n    case 'error':\n      console.log('Ошибка:', state.error);\n      break;\n  }\n});\n\n// Вариант 2: Ожидание результата запроса\nconst response = await request.wait();\n\n// Вариант 3: Ожидание с колбеками для разных состояний\nawait request.waitWithCallbacks({\n  loading: () => console.log('Загрузка...'),\n  success: (data) => console.log('Данные:', data),\n  error: (error) => console.error('Ошибка:', error),\n});",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 8,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Навигация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Все разделы документации",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 27,
                              "url": "./README.md#-документация",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Связанные разделы:",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Базовое использование",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 24,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Эффектов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 19,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ Утилита createSynapse",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 17,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Навигация"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:52:49.645Z",
        "wordCount": 348,
        "readingTime": 2,
        "sectionsCount": 2,
        "codeBlocksCount": 1
      }
    },
    "basic-usage": {
      "title": "Базовое использование",
      "sections": [
        {
          "id": "basic-usage",
          "title": "Базовое использование",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Импорты:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Инструменты создания и управления хранилищем\nimport {\n  // Хранилища\n  MemoryStorage,\n  IndexedDBStorage,\n  LocalStorage,\n\n  // Интерфейсы для хранилищ\n  IStorage,\n\n  // middleware для хранилища\n  broadcastMiddleware,\n\n  // Для создания кастомных плагинов хранилища\n  StoragePluginModule,\n  IStoragePlugin,\n  PluginContext,\n  StorageKeyType,\n\n  // Для создания кастомных middlewares хранилища\n  Middleware,\n  MiddlewareAPI,\n  NextFunction,\n\n  // Модуль создания вычисляемых селекторов в Redux стиле\n  SelectorModule,\n  ISelectorModule\n} from 'synapse-storage/core'\n\n// Инструменты для использования реактивного подхода (немного похоже на Redux-Observable)\nimport { \n  // Инструменты для создания Dispatcher\n  createDispatcher,\n  loggerDispatcherMiddleware,\n\n  // Инструменты для создания Effects (напоминает Redux-Observable)\n  EffectsModule, \n  combineEffects, \n  createEffect,\n  ofType,\n  ofTypes,\n  selectorMap,\n  validateMap\n} from 'synapse-storage/reactive';\n\n// Инструменты для работы с api\nimport { ApiClient, ResponseFormat } from 'synapse-storage/api'\n\n// Несколько инструментов для удобного использования в React\nimport { useStorageSubscribe, useSelector, createSynapseCtx } from 'synapse-storage/react'\n\nimport { createSynapse } from 'synapse-storage/utils'",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 1,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "creating-storage",
          "title": "Создание хранилищ",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const counter1 = await new MemoryStorage<Counter>({\n  name: 'counter1',\n  initialState: {\n    value: 100,\n  },\n}).initialize()",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const counter2 = await new LocalStorage<Counter>({\n  name: 'counter2',\n  initialState: { value: 100 },\n}).initialize()",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const { counter3 } = await IndexedDBStorage.createStorages<{ counter3: Counter }>(\n  'example1', // Название базы данных в indexDB\n  // Таблицы:\n  {\n    counter3: {\n      name: 'counter3',\n      initialState: { value: 99 },\n      // eventEmitter: ,\n      // initialState: ,\n      // middlewares: ,\n      // pluginExecutor: ,\n    },\n    // Другие объекты (хранилища в текущей базе данных)\n  }\n)",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 3,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "ways-to-change-values-main",
          "title": "Способы изменения значений (основные)",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "    const updateCounter1 = async () => {\n        await counter1.update((state) => {\n            state.value = state.value + 1\n        })\n    }\n\n    const updateCounter2 = async () => {\n        await counter2.set('value', counter2ValueSelectorValue! + 1)\n    }\n\n    const updateCounter3 = async () => {\n        counter3.set('value', counter3ValueSelectorValue! + 1)\n    }",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "creating-subscriptions",
          "title": "Создание подписок",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "jsx",
                "code": "const [counter1Value, setCounter1Value] = useState(0)\nconst [counter2Value, setCounter2Value] = useState(0)\n\n\nuseEffect(() => {\n  // Подписка через колбэк\n  counter1.subscribe((state) => state.value, (value) => {\n    setCounter1Value(value)\n  })\n  // Подписка через путь (может быть типа 'user.settings.theme')\n  counter2.subscribe('value', (value) => {\n    setCounter2Value(value)\n  })\n\n  // Подписка на все события\n  counter1.subscribeToAll((event) => {\n    console.log('event', event)\n    // Здесь мы получим объект:\n    // changedPaths:['value'] // все пути, по которым были вызваны изменения (['prop1.prop2', 'prop44.prop.555.prop.666'])\n    // key:['value'] // Корневые ключи в хранилище, в которых были изменения\n    // type:\"storage:update\" // Тип операции\n    // value: {value: 101} // Новый state\n  })\n}, [])\n// Для React через специальный селектор\nconst counter3Value = useStorageSubscribe(counter3, (state) => state.value)",
                "meta": null
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "💡 Совет:\nПри создании подписок с помощью subscribe или subscribeToAll лучше не забывать вызывать функцию отписки",
                      "formatting": {
                        "bold": [
                          {
                            "start": 0,
                            "end": 9
                          }
                        ],
                        "italic": [],
                        "code": [],
                        "links": []
                      }
                    }
                  }
                ],
                "emoji": "\ud83d"
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 16,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Навигация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Все разделы документации",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 27,
                              "url": "./README.md#-документация",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Связанные разделы:",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🧮 Вычисляемые селекторы в стиле Redux",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 38,
                              "url": "./redux-selectors.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ Утилита createSynapse",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 19,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Навигация"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:54:16.547Z",
        "wordCount": 434,
        "readingTime": 3,
        "sectionsCount": 5,
        "codeBlocksCount": 6
      }
    },
    "create-dispatcher": {
      "title": "Создание диспетчера",
      "sections": [
        {
          "id": "creating-dispatcher",
          "title": "Создание диспетчера",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Диспетчер необходим для создания реактивного состояния",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { createDispatcher, loggerDispatcherMiddleware } from 'synapse-storage/reactive'\nimport { PokemonStorage } from '../storages/pokemon.storage'\nimport { createPokemonAlertMiddleware } from '../middlewares/pokenon.middlewares'\nimport { Pokemon } from '../types'\n\n// const myWorker = new Worker('path-to-my-worker')\n\nexport interface AlertPayload {\n  message: string\n  type: 'info' | 'warning' | 'error' | 'success'\n  duration?: number // Длительность показа в миллисекундах\n}\n\n// Функция для создания диспетчера\nexport function createPokemonDispatcher(storage: PokemonStorage) {\n  // Создаем middleware: логгер\n    const loggerMiddleware = loggerDispatcherMiddleware({\n        collapsed: true, // Сворачиваем группы в консоли для компактности\n        colors: {\n            title: '#3498db', // Кастомный синий цвет для заголовка\n        },\n        duration: true,      // Время выполнения\n        diff: true,          // Показывать полное состояние\n        showFullState: true, // Показывать полное состояние\n        // Кастомные переводы интерфейса\n        translations: {\n            action: '',\n            changesCount: '',\n            diff: '',\n            duration: '',\n            error: '',\n            //...\n        }\n    })\n\n  // Создаем middleware: alertM (просто для примера)\n  const alertM = createPokemonAlertMiddleware()\n\n  return createDispatcher({\n    storage,\n    middlewares: [loggerMiddleware, alertM],\n  }, (storage, { createWatcher, createAction }) => ({\n    // watcher`s\n    watchCurrentId: createWatcher({\n      type: 'watchCurrentId',\n      selector: (state) => state.currentId,\n      shouldTrigger: (prev, curr) => prev !== curr,\n      notifyAfterSubscribe: false, // Только изменения (по умолчанию)\n      meta: { description: 'Отслеживание смены текущего покемона' },\n    }),\n\n    // Следит за профилем пользователя для синхронизации\n    watchUserProfile: createWatcher({\n      type: 'watchUserProfile',\n      selector: (state) => state.userProfile,\n      shouldTrigger: (prev, curr) => JSON.stringify(prev) !== JSON.stringify(curr),\n      notifyAfterSubscribe: true, // Эмитим при подписке для синхронизации\n      meta: { description: 'Синхронизация профиля между модулями' },\n    }),\n    // События\n    loadPokemon: createAction<number, { id: number }>({...}),\n    loadPokemonRequest: createAction<number, { id: number }>({...}),\n    // Успешное получение данных\n    success: createAction<{ data?: Pokemon}, { data?: Pokemon }>({...}, {\n      // Функция мемоизации (пока не тестировал)\n      // memoize: (currentArgs: any[], previousArgs: any[], previousResult: any) => true,\n      // Веб-воркер для выполнения действия (пока не тестировал)\n      // worker: myWorker,\n    }),\n    failure: createAction<Error, { err: Error }>({...}),\n    next: createAction<void, { id: number }>({...}),\n    prev: createAction<void, { id: number }>({...}),\n    showAlert: createAction<AlertPayload, void>({...}),\n  }))\n  // Альтернативный вариант добавления:\n  // .use(logger)\n  // .use(alertM)\n}\n\n// Экспортируем тип диспетчера\nexport type PokemonDispatcher = ReturnType<typeof createPokemonDispatcher>",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 6,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Навигация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Все разделы документации",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 27,
                              "url": "./README.md#-документация",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Связанные разделы:",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Эффектов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 19,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Модуля эффектов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 26,
                              "url": "./create-effects-module.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ Утилита createSynapse",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Создание пользовательских middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 40,
                              "url": "./custom-middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 22,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Навигация"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T07:57:31.603Z",
        "wordCount": 372,
        "readingTime": 2,
        "sectionsCount": 2,
        "codeBlocksCount": 1
      }
    },
    "create-effects-module": {
      "title": "Создание Модуля эффектов",
      "sections": [
        {
          "id": "creating-effects-module",
          "title": "Создание Модуля эффектов",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Модуль эффектов (EffectsModule) позволяет создавать реактивные эффекты для обработки действий и состояний без использования утилиты createSynapse. Это полезно, когда вам нужен более детальный контроль над настройкой эффектов.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            }
          ],
          "metadata": {
            "wordCount": 27,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "prerequisites",
          "title": "Пререквизиты",
          "level": 2,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Для создания модуля эффектов нам понадобятся готовые компоненты:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Создание хранилищ",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 20,
                              "url": "./basic-usage.md#создание-хранилищ",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Диспетчера",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 21,
                              "url": "./create-dispatcher.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Эффектов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 19,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 API-клиент (опционально)",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 13,
                              "url": "./api-client.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 20,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "creating-effects-module",
          "title": "Создание модуля эффектов",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { EffectsModule } from 'synapse-storage/reactive'\n\n// 1. Создаем хранилище\nconst storage = await new MemoryStorage<PokemonState>({...}).initialize()\n\n// 2. Получаем вычисляемые селекторы (опционально)\nconst selectors = new SelectorModule(storage)\n\n// 3. Создаем диспетчер\nconst dispatcher = createDispatcher({ storage }, (...) => ({...}))\n\n// 4. Подготавливаем внешние состояния (другие EffectsModule.state$)\nconst externalStates = {\n  userState$: userEffectsModule.state$,\n  settingsState$: settingsEffectsModule.state$\n}\n\n// 5. Создаем модуль эффектов\nconst effectsModule = new EffectsModule(\n  storage,                             // Хранилище состояния\n  externalStates,                      // Внешние состояния (state$ от других модулей)\n  { pokemonDispatcher: dispatcher },   // Объект с диспетчерами\n  { pokemonApi },                      // Объект с API/сервисами\n  { apiTimeout: 5000 }                 // Конфигурация для эффектов/проекта\n)\n\n// 6. Добавляем объединенные эффекты\neffectsModule.add(pokemonEffects)\n\n// 7. Запускаем эффекты\neffectsModule.start()\n\n// 8. Получаем поток состояния\nconst state$ = effectsModule.state$",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "linking-modules",
          "title": "Связывание модулей",
          "level": 2,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Основная особенность - externalStates это state$ от других EffectsModule:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Базовые модули\nconst userModule = new EffectsModule(userStorage, {}, { userDispatcher }, {}, {})\nconst settingsModule = new EffectsModule(settingsStorage, {}, { settingsDispatcher }, {}, {})\n\nuserModule.start()\nsettingsModule.start()\n\n// Главный модуль использует состояния базовых\nconst pokemonModule = new EffectsModule(\n  pokemonStorage,\n  {\n    userState$: userModule.state$,        // 👈 state$ от другого модуля\n    settingsState$: settingsModule.state$ // 👈 state$ от другого модуля\n  },\n  { pokemonDispatcher },\n  { pokemonApi },\n  {}\n)\n\npokemonModule.add(pokemonEffects).start()",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 9,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "usage-in-effects",
          "title": "Использование в эффектах",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const crossModuleEffect = createEffect((action$, state$, externalStates, dispatchers, api) =>\n  action$.pipe(\n    ofType(dispatchers.pokemonDispatcher.dispatch.loadPokemon),\n    withLatestFrom(\n      externalStates.userState$,    // 👈 Данные из userModule\n      externalStates.settingsState$ // 👈 Данные из settingsModule\n    ),\n    switchMap(([action, userState, settingsState]) => {\n      // Используем данные из других модулей\n      return from(api.pokemonApi.fetchPokemon({\n        id: action.payload.id,\n        userId: userState.id,\n        lang: settingsState.language\n      }))\n    })\n  )\n)",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "lifecycle-management",
          "title": "Управление жизненным циклом",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Добавление эффектов во время выполнения\neffectsModule.add(newEffect)\n\n// Остановка\neffectsModule.stop()\n\n// Очистка ресурсов\nawait storage.destroy()",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "when-to-use",
          "title": "Когда использовать",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Детальный контроль над инициализацией",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Сложные многоуровневые системы состояния",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Модульная архитектура с независимыми доменами",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Интеграция с существующими системами",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 17,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Навигация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Все разделы документации",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 27,
                              "url": "./README.md#-документация",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Связанные разделы:",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Диспетчера",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 21,
                              "url": "./create-dispatcher.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Эффектов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 19,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ Утилита createSynapse",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Базовое использование",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 24,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 20,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Навигация"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-18T08:42:59.450Z",
        "wordCount": 402,
        "readingTime": 3,
        "sectionsCount": 8,
        "codeBlocksCount": 4
      }
    },
    "create-effects": {
      "title": "Создание Эффекта",
      "sections": [
        {
          "id": "creating-effects",
          "title": "Создание Эффекта",
          "level": 1,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { EMPTY, from, mapTo, of, tap } from 'rxjs'\nimport { catchError, map, switchMap } from 'rxjs/operators'\n\nimport {\n  ofType,           // Слушает 1 событие\n  ofTypes,          // Слушает несколько событий\n  createEffect,     // Функция создания эффекта\n  combineEffects,   // Объединяет несколько эффектов в один\n  selectorMap,      // Выбор частей состояния с помощью селекторов (возвращает массив)\n  selectorObject,   // Выбор частей состояния с помощью селекторов (возвращает объект)\n  validateMap       // Оператор для удобной работы с запросом\n} from 'synapse-storage/reactive'\nimport { pokemonEndpoints } from '../api/pokemon.api'\nimport { AppConfig } from '../app.config'\nimport { PokemonDispatcher } from '../pokemon.dispatcher'\nimport { Pokemon, PokemonState } from '../types'\n\n// Определяем типы для наших эффектов\ntype DispatcherType = {\n  pokemonDispatcher: PokemonDispatcher \n}\ntype ApiType = { \n  pokemonApi: typeof pokemonEndpoints \n}\ntype ExternalStorages = {\n  core$: typeof coreSynapseIDB.state$\n}\n\ntype Effect = ReturnType<typeof createEffect<\n  AboutUserUserInfo,    // Тип текущего хранилища\n  DispatcherType,       // Типы диспетчеров\n  ApiType,              // Типы api\n  Record<string, void>, // Тип конфигурации\n  ExternalStorages     // Типы внешних хранилищ потоков\n>>\n\n// Эффект для навигации\nexport const navigationEffect: Effect = createEffect((action$, state$, externalStorages, { pokemonDispatcher }, _, config) =>\n  action$.pipe(\n    ofTypes([pokemonDispatcher.dispatch.next, pokemonDispatcher.dispatch.prev]),\n    switchMap((action) => {\n      const { id } = action.payload\n      return of(() => pokemonDispatcher.dispatch.loadPokemon(id))\n    }),\n  ),\n)\n\n// Эффект для отслеживания изменений ID\nexport const watchIdEffect: Effect = createEffect((action$, state$, externalStorages, { pokemonDispatcher }) =>\n  action$.pipe(\n    ofType(pokemonDispatcher.watchers.watchCurrentId),\n    withLatestFrom(\n          selectorMap(state$,\n            (state) => state.value\n          //... selectors\n        ),\n    ),\n    mapTo(null),\n  ),\n)\n\n// Эффект для загрузки данных покемона\nexport const loadPokemonEffect: Effect = createEffect((\n  action$,                // Поток событий \n  state$,                 // Поток состояния\n  externalStorages,       // Потоки внешних хранилищ\n  { pokemonDispatcher },  // Диспетчеры которые мы передали\n  { pokemonApi },         // различные API которые мы передали\n  config                   // Конфигурация, которую мы передали\n  ) =>\n  action$.pipe(\n    // Я использую отдельный action loadPokemon который уведомляет о намерении сделать запрос\n    // Для того, чтобы не устанавливать loading сразу\n    ofType(pokemonDispatcher.dispatch.loadPokemon),\n    withLatestFrom(\n      selectorMap(state$, (s) => s.currentId, (s) => s.currentId),           // |\n      selectorMap(pokemon1State$, (s) => s.currentId, (s) => s.currentId),   // | получает поток и селекторы, возвращает массив с результатами\n      selectorMap(pokemon1State$, (s) => s.currentId),                       // |\n      selectorObject(state$, {                                     // |\n        currentId: (s) => s.currentId,                             // | получает поток и возвращает объект с результатами (для каждого свойства вызывается функция с состояниеме этого потого потока)\n        name: (s) => s.currentPokemon?.sprites,                    // |\n      }),\n    ),\n    validateMap({\n      apiCall: ([action, [currentId], [externalId, externalId2], [external2Id], externalData]) => {\n        const { id } = action.payload\n\n        return from(\n          // Использую waitWithCallbacks чтобы иметь доступ к методу loading\n          pokemonApi.fetchPokemonById.request({ id }).waitWithCallbacks({\n            // Вызывается только тогда, когда запрос реально отправляется, а не берется из кэша\n            loading: (request) => {\n              // Именно в в этот момент установится loading и другая необходимая логика\n              pokemonDispatcher.dispatch.loadPokemonRequest(id)\n            },\n            // Можно использовать так:\n            // success: (data, request) => {\n            //   console.log('SUCCESS', request)\n            //   pokemonDispatcher.dispatch.success({ data })\n            // },\n            // error: (error, request) => {\n            //   console.log('ERROR', error, request)\n            //   pokemonDispatcher.dispatch.failure(error!)\n            // },\n          }),\n          // Можно более стандартным способом:\n        ).pipe(\n          switchMap(({ data }) => {\n            return of(pokemonDispatcher.dispatch.success({ data }))\n          }),\n          catchError((err) => of(pokemonDispatcher.dispatch.failure(err))),\n        )\n      },\n    }),\n  ),\n)\n\n// Объединяем все эффекты в один и экспортируем\nexport const pokemonEffects = combineEffects(\n  navigationEffect,\n  watchIdEffect,\n  loadPokemonEffect\n)",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Навигация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Все разделы документации",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 27,
                              "url": "./README.md#-документация",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Связанные разделы:",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Диспетчера",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 21,
                              "url": "./create-dispatcher.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Модуля эффектов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 26,
                              "url": "./create-effects-module.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 API-клиент",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 13,
                              "url": "./api-client.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ Утилита createSynapse",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 20,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Навигация"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-18T07:33:23.025Z",
        "wordCount": 545,
        "readingTime": 3,
        "sectionsCount": 2,
        "codeBlocksCount": 1
      }
    },
    "create-synapse": {
      "title": "Пример организации кода и использования утилиты createSynapse",
      "sections": [
        {
          "id": "code-organization-example-and-createsynapse-utility-usage",
          "title": "Пример организации кода и использования утилиты createSynapse",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Утилита createSynapse - это всего лишь обертка над всеми модулями, которая связывает их в единое целое.\nВы можете сделать свою, если так будет удобнее.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Предлагаемая структура файлов",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "md",
                "code": "📦some-directory\n└── 📂synapses\n│    └── 📂core\n│    │    ├── 📄core.dispatcher.ts\n│    │    ├── 📄core.synapse.ts\n│    │    └── ...\n│    └── 📂user-info\n│    │    ├── 📄user-info.context.tsx\n│    │    ├── 📄user-info.dispatcher.ts\n│    │    ├── 📄user-info.effects.ts\n│    │    ├── 📄user-info.selectors.ts\n│    │    ├── 📄user-info.store.ts\n│    │    └── 📄user-info.synapse.ts\n│    └──...\n│\n└── 📄indexdb.config.ts",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.store.ts\n// === СОЗДАНИЕ ХРАНИЛИЩА НУЖНОГОТИПА ===\nexport async function createUserInfoStorage() {\n  return new MemoryStorage<AboutUserUserInfo>({\n    name: 'user-info',\n    initialState: {\n      userInfoInit: undefined,\n      isChangeActive: false,\n      fieldsInit: {},\n      fields: {},\n    },\n  }).initialize()\n}",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.dispatcher.ts\n// === СОЗДАНИЕ ДИСПЕТЧЕРА ===\n\nimport { IStorage } from 'synapse-storage/core'\nimport { createDispatcher, loggerDispatcherMiddleware } from 'synapse-storage/reactive'\n\nexport function createUserInfoDispatcher(store: IStorage<AboutUserUserInfo>) {\n  const loggerMiddleware = loggerDispatcherMiddleware({...})\n\n  return createDispatcher({ storage: store }, (storage, { createAction, createWatcher }) => ({\n    setCurrentUserProfile: createAction<UserProfileInfo, UserProfileInfo>({\n      type: 'setCurrentUserProfile',\n      // meta: ,\n      // action: async () => {...}),\n    }),\n\n    setActiveChange: createAction<void, void>({\n      type: 'setActiveChange',\n      // meta: ,\n      // action: async () => {...}),\n    })\n  // Другие диспетчеры ...\n  })).use(loggerMiddleware)\n}\n\nexport type UserInfoDispatcher = ReturnType<typeof createUserInfoDispatcher>",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.dispatcher.ts\n// === СОЗДАНИЕ СЕЛЕКТОРОВ ===\nimport { ISelectorModule } from 'synapse-storage/core'\n\nexport const createUserInfoSelectors = (selectorModule: ISelectorModule<AboutUserUserInfo>) => {\n  const currentUserProfile = selectorModule.createSelector((s) => s.userInfoInit)\n  const fieldsInit = selectorModule.createSelector((s) => s.fieldsInit)\n\n  const isChangeActive = selectorModule.createSelector((s) => s.isChangeActive)\n\n  const fields = selectorModule.createSelector((s) => s.fields)\n  // Для React\n  // Комопнент будет ререндериться всегда, когда меняется возвращаемое селектором значение\n  // Для уменьшения ререндеров советую создавать точечные селекторы\n  // Если для отображения information у вас отдельный компонент - лучше создать отдельный для него селектор\n  const fieldInformation = selectorModule.createSelector((s) => s.fields.information)\n  const fieldPosition = selectorModule.createSelector((s) => s.fields.position)\n  //...\n\n  return ({\n    currentUserProfile,\n    isChangeActive,\n    //...\n  })\n}",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.effects.ts\n// === СОЗДАНИЕ ЭФФЕКТОВ ===\nimport { EMPTY, from, of } from 'rxjs'\nimport { catchError, map } from 'rxjs/operators'\nimport { combineEffects, createEffect, ofType, validateMap } from 'synapse-storage/reactive'\n\ntype CurrentDispatchers = {\n  userInfoDispatcher: UserInfoDispatcher\n  coreIdbDispatcher: CoreDispatcher\n};\ntype CurrentApis = {\n  userInfoAPi: typeof userInfoEndpoints\n};\ntype ExternalStorages = {\n}\n\ntype Effect = ReturnType<typeof createEffect<\n  AboutUserUserInfo,     // Тип текущего хранилища\n  CurrentDispatchers,       // Типы диспетчеров\n  CurrentApis,              // Типы api\n  Record<string, void>, // Тип конфигурации\n  ExternalStorages     // Типы внешних хранилищ потоков\n>>\n\n/**\n * Добавляем полученный профиль пользователя в текущий СТор\n */\nconst loadUserInfoById: Effect = createEffect((action$, state$, { userInfoDispatcher, coreIdbDispatcher }) => action$.pipe(\n  // Подписываемся на изменения в стороннем Synapse\n  ofType(coreIdbDispatcher.watchers.watchCurrentUserProfile),\n  map((s) => {\n    if (!s.payload) return EMPTY\n    // Берем данные из стороннего Synapse и кладем в текущий\n    return userInfoDispatcher.dispatch.setCurrentUserProfile(s.payload)\n  }),\n))\n\nconst updateUserProfile: Effect = createEffect((action$, state$, { userInfoDispatcher }, { userInfoAPi }) => action$.pipe(\n  ofType(userInfoDispatcher.dispatch.submit),\n  validateMap({\n    // Валидация перед запросом\n    validator: (action) => ({\n      skipAction: userInfoDispatcher.dispatch.reset(),\n      conditions: [Boolean(action.payload)]\n    }),\n    apiCall: (action) => {\n      return from(\n        userInfoAPi.getUserById.request({ user_id: 1 }).waitWithCallbacks({\n          // Вызывается только тогда, когда запрос реально отправляется, а не берется из кэша\n          loading: (request) => {\n            // Именно в в этот момент установится loading и другая необходимая логика\n            // userInfoDispatcher.dispatch.request(id)\n          },\n          // Можно использовать так:\n          success: (data, request) => {\n            // userInfoDispatcher.dispatch.success({ data })\n          },\n          error: (error, request) => {\n            // userInfoDispatcher.dispatch.failure(error!)\n          },\n        }),\n      )\n    },\n  }),\n))\n\nexport const userInfoEffects = combineEffects(\n  loadUserInfoById,\n  updateUserProfile,\n)\n",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.synapse.ts\n// === СОЗДАНИЕ Synapse ===\nimport { createSynapse } from 'synapse-storage/utils'\nimport { createUserInfoDispatcher } from './user-info.dispatcher'\nimport { userInfoEffects } from './user-info.effects'\nimport { createUserInfoSelectors } from './user-info.selectors'\nimport { createUserInfoStorage } from './user-info.store'\nimport { userInfoEndpoints } from '../../api/user-info.api'\nimport { coreSynapseIDB } from '../core/core.synapse'\n\nexport const userInfoSynapse = await createSynapse({\n  dependencies: [coreSynapseIDB], // Дождется инициализации coreSynapseIDB\n  // Передаем хранилище\n  // Это может быть \n  // 1 - Функция, которая возвращает готовое хранилище\n  createStorageFn: createUserInfoStorage,\n  // 2 - Класс для создания хранилища (initialize() убдет вызван внутри)\n  // storage: new MemoryStorage<AboutUserUserInfo>({\n  //   name: 'user-info',\n  //   initialState: {\n  //     userInfoInit: undefined,\n  //     isChangeActive: false,\n  //     fieldsInit: {},\n  //     fields: {},\n  //   },\n  // }),\n  // Функция создания диспетчеров (Опционально)\n  createDispatcherFn: createUserInfoDispatcher,\n  // Функция создания селекторов (Опционально)\n  createSelectorsFn: createUserInfoSelectors,\n  // Внешние селекторы (Опционально)\n  externalSelectors: {\n    // externalSelectors1: ...\n  },\n  // Конфигурация для эффектов (Опционально)\n  createEffectConfig: (userInfoDispatcher) => ({\n    // Диспетчеры для эффектов\n    dispatchers: {\n      userInfoDispatcher,                           // Текущий, для управления соственных хранилищем\n      coreIdbDispatcher: coreSynapseIDB.dispatcher, // Внешний, для взаиможействия с внешними хранилищами\n      //...\n    },\n    // Дополнительное АПИ по вашему усмотрения (у меня это API Clients)\n    api: {\n      userInfoAPi: userInfoEndpoints,\n    },\n    // Внешние состояния ввиде потоков, которые хотим использовать в эффектах\n    externalStates: {\n      pokemonState$: pokemon1State$,\n      core$: coreSynapseIDB.state$,\n    },\n  }),\n  // Эффекты которые будут запущены для этого synapse\n  effects: [userInfoEffects],\n})",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "tsx",
                "code": "// user-info.context.tsx\n// === СОЗДАНИЕ React Context ===\nimport { createSynapseCtx } from 'synapse-storage/react'\nimport { userInfoSynapse } from './user-info.synapse'\n\n// Получаем все необходимые инструменты для работы в компонете\nexport const {\n  contextSynapse: useUserInfoContextSynapse,\n  useSynapseActions: useUserInfoSynapseActions,\n  useSynapseSelectors: useUserInfoSynapseSelectors,\n  useSynapseState$: useUserInfoSynapseState$,\n  useSynapseStorage: useUserInfoSynapseStorage,\n  cleanupSynapse: useUserInfoCleanupSynapse,\n} = createSynapseCtx(\n    // Передаем сам Synapse\n    userInfoSynapse,\n    {\n      loadingComponent: <div>loading</div>, // Передаем компонент, который будет отображаться пока идет загрузка инициализация\n      // mergeFn: // Функция слияния переданных параметров в initialState (по умолчанию выполняется глубокая копия)\n    },\n)",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Таким образом вы можете резделить функционал на слои",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 35,
            "codeBlocksCount": 7,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "connecting-synapse-to-each-other",
          "title": "Связывание Synapse между собой",
          "level": 2,
          "content": [
            {
              "type": "heading",
              "data": {
                "text": "📊 Обычная связь через dependencies",
                "level": 3,
                "id": "-dependencies"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Как показано на примере выше - вы можете связывать синопсы просто передавая их в массив зависимостей",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// user-info.synapse.ts\n// === СОЗДАНИЕ Synapse ===\nimport { createSynapse } from 'synapse-storage/utils'\nimport { createUserInfoDispatcher } from './user-info.dispatcher'\nimport { userInfoEffects } from './user-info.effects'\nimport { createUserInfoSelectors } from './user-info.selectors'\nimport { createUserInfoStorage } from './user-info.store'\nimport { userInfoEndpoints } from '../../api/user-info.api'\nimport { coreSynapseIDB } from '../core/core.synapse'\n\nexport const currentSynapse = await createSynapse({\n  dependencies: [someSynapse1, someSynapse2, someSynapse3], // Дождется инициализации всего, отчего зависит\n  //...\n})",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "В этом случае общая схема будет выглядеть так:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "diagram",
              "data": {
                "code": "graph TD\n    Core((Core<br/>Synapse))\n    UserInfo((UserInfo<br/>Synapse))\n    Posts((Posts<br/>Synapse))\n    Settings((Settings<br/>Synapse))\n    \n    Core --> UserInfo\n    Core --> Posts\n    Core --> Settings\n    "
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "📡 EventBus паттерн (продвинутый)",
                "level": 3,
                "id": "-eventbus-"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "EventBus паттерн - альтернативный способ связи синопсов между собой\nЕго главные преимущества - уменьшение связи между модулями и отсутствие проблемы циклических зависимостей, если нужно связать два модуля между собой в обоих направлениях",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "В этом случае общая схема будет выглядеть так:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "diagram",
              "data": {
                "code": "graph TD\n    EventBus((EventBus<br/>Synapse))\n    Auth((Auth<br/>Synapse))\n    User((User<br/>Synapse))\n    Notifications((Notifications<br/>Synapse))\n    \n    Auth -.-> EventBus\n    User -.-> EventBus\n    Notifications -.-> EventBus\n    EventBus -.-> Auth\n    EventBus -.-> User\n    EventBus -.-> Notifications\n    "
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "⚙️ Конфигурация EventBus",
                "level": 3,
                "id": "-eventbus"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const appEventBus = await createEventBus({\n  name: 'app-events',        // Имя для отладки и логирования\n  autoCleanup: true,         // Автоматическая очистка старых событий\n  maxEvents: 500            // Максимальное количество событий в памяти\n})",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "🔧 Основные методы",
                "level": 4,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "publish() - публикация события с данными и метаданными",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "subscribe() - подписка на события с поддержкой паттернов ('USER_', '')",
                        "formatting": {
                          "bold": [],
                          "italic": [
                            {
                              "start": 64,
                              "end": 68
                            }
                          ],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "getEventHistory() - получение истории событий определенного типа",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "clearEvents() - очистка событий (всех или старше определенного времени)",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "getActiveSubscriptions() - список активных подписок",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "💡 Практические советы",
                "level": 4,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Именование событий: используйте формат 'MODULE_ACTION' (например, 'USER_LOGGED_IN', 'ORDER_CREATED')",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Паттерны: 'USER_' для всех пользовательских событий, '' для глобального мониторинга",
                        "formatting": {
                          "bold": [],
                          "italic": [
                            {
                              "start": 16,
                              "end": 54
                            }
                          ],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Приоритеты: 'high' для критичных событий, 'normal' для обычных, 'low' для логирования",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "// Создание EventBus с помощью утилиты\nimport { createEventBus } from 'synapse-storage/utils'\n\nexport const appEventBus = await createEventBus({\n  name: 'app-events',\n  autoCleanup: true,\n  maxEvents: 500\n})\n\n// auth.synapse.ts\nexport const authSynapse = await createSynapse({\n  dependencies: [appEventBus], // Подключаем EventBus\n  createEffectConfig: (authDispatcher) => ({\n    dispatchers: {\n      authDispatcher,\n      eventBus: appEventBus.dispatcher\n    }\n  }),\n  effects: [\n    // Effect для публикации событий при успешной авторизации\n    createEffect((action$, state$, _, { authDispatcher, eventBus }) => \n      action$.pipe(\n        ofType(authDispatcher.dispatch.loginSuccess),\n        map(action => \n          eventBus.dispatch.publish({\n            event: 'USER_LOGGED_IN',\n            data: action.payload,\n            metadata: { priority: 'high' }\n          })\n        )\n      )\n    )\n  ]\n})\n\n// user.synapse.ts\nexport const userSynapse = await createSynapse({\n  dependencies: [appEventBus], // Подключаем EventBus\n  createEffectConfig: (userDispatcher) => ({\n    dispatchers: {\n      userDispatcher,\n      eventBus: appEventBus.dispatcher\n    }\n  }),\n  effects: [\n    // Effect для подписки на события авторизации\n    createEffect((action$, state$, _, { userDispatcher, eventBus }) => {\n      // Подписываемся на события входa пользователя\n      eventBus.dispatch.subscribe({\n        eventPattern: 'USER_*', // Поддержка паттернов\n        handler: (userData, event) => {\n          if (event.event === 'USER_LOGGED_IN') {\n            userDispatcher.dispatch.loadUserProfile(userData.id)\n          }\n        },\n        options: { priority: 'high' } // Фильтрация по приоритету\n      })\n      \n      return EMPTY // Этот effect только устанавливает подписку\n    })\n  ]\n})\n\n// notifications.synapse.ts\nexport const notificationsSynapse = await createSynapse({\n  dependencies: [appEventBus],\n  createEffectConfig: (notificationsDispatcher) => ({\n    dispatchers: {\n      notificationsDispatcher,\n      eventBus: appEventBus.dispatcher\n    }\n  }),\n  effects: [\n    // Подписка на все события для показа уведомлений\n    createEffect((action$, state$, _, { notificationsDispatcher, eventBus }) => {\n      eventBus.dispatch.subscribe({\n        eventPattern: '*', // Слушаем все события\n        handler: (data, event) => {\n          notificationsDispatcher.dispatch.showNotification({\n            message: `Событие: ${event.event}`,\n            data\n          })\n        }\n      })\n      \n      return EMPTY\n    })\n  ]\n})",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "🎯 Преимущества каждого подхода",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "Dependencies (Обычный)",
                "level": 4,
                "id": "dependencies-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Простота понимания",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Прямые связи между модулями",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ TypeScript типизация из коробки",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "❌ Жесткая связанность модулей",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "❌ Сложность при большом количестве связей",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "EventBus (Продвинутый)",
                "level": 4,
                "id": "eventbus-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Слабая связанность модулей",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Легкость добавления новых модулей",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Централизованное управление событиями",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Возможность отладки всех событий в одном месте",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Поддержка паттернов событий ('USER_', '')",
                        "formatting": {
                          "bold": [],
                          "italic": [
                            {
                              "start": 37,
                              "end": 41
                            }
                          ],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Фильтрация по приоритету и метаданным",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "✅ Автоматическая очистка старых событий",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "❌ Сложность отслеживания потока данных",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "❌ Необходимость ручной типизации событий",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 229,
            "codeBlocksCount": 3,
            "diagramsCount": 2,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Навигация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Все разделы документации",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 27,
                              "url": "./README.md#-документация",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Связанные разделы:",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Базовое использование",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 24,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Диспетчера",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 21,
                              "url": "./create-dispatcher.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚡ Создание Эффектов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 19,
                              "url": "./create-effects.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🧮 Вычисляемые селекторы в стиле Redux",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 38,
                              "url": "./redux-selectors.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🌐 API-клиент",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 13,
                              "url": "./api-client.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 25,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcca Обычная связь через dependencies",
        "\udce1 EventBus паттерн (продвинутый)",
        "️ Конфигурация EventBus",
        "\udd27 Основные методы",
        "\udca1 Практические советы",
        "\udfaf Преимущества каждого подхода",
        "\udcda Навигация"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T08:02:04.201Z",
        "wordCount": 1550,
        "readingTime": 8,
        "sectionsCount": 3,
        "codeBlocksCount": 10
      }
    },
    "custom-middlewares": {
      "title": "Создание пользовательских middlewares",
      "sections": [
        {
          "id": "creating-custom-middlewares",
          "title": "Создание пользовательских middlewares",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Synapse предоставляет две системы расширения функциональности: middleware и плагины. Они выполняют разные роли и имеют разную область применения.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Middleware в Synapse работают по принципу \"цепочки обработчиков\" и позволяют перехватывать любые операции хранилища. Каждое middleware может модифицировать действия до и после их обработки базовым хранилищем.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "Порядок выполнения middleware",
                "level": 3,
                "id": "-middleware"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Middleware выполняются в порядке их объявления в массиве:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Действие проходит через все middleware сверху вниз",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Затем выполняется базовая операция хранилища",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Результат проходит через middleware снизу вверх",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                }
              ]
            },
            {
              "type": "code",
              "data": {
                "language": "text",
                "code": "Action → BroadcastMiddleware → ShallowCompare → Batching → Base Operation\nResult ← BroadcastMiddleware ← ShallowCompare ← Batching ← Base Operation",
                "meta": null
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "⚠️ Важно: Порядок middleware имеет значение!",
                      "formatting": {
                        "bold": [],
                        "italic": [],
                        "code": [],
                        "links": []
                      }
                    }
                  },
                  {
                    "type": "list",
                    "data": [
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "BroadcastMiddleware должен быть первым для синхронизации между вкладками",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      },
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "ShallowCompare оптимизирует повторные вызовы",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      },
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "Batching группирует операции для производительности",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      }
                    ]
                  }
                ],
                "emoji": "⚠"
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "Создание пользовательского middleware",
                "level": 4,
                "id": "-middleware"
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { Middleware } from 'synapse-storage/core';\n\nconst loggingMiddleware = (): Middleware => ({\n  // Уникальное имя middleware\n  name: 'logging',\n  \n  // Инициализация при добавлении middleware к хранилищу\n  setup: (api) => {\n    console.log('Logging middleware initialized');\n  },\n  \n  // Основная логика перехвата и обработки действий\n  reducer: (api) => (next) => async (action) => {\n    console.log('Before action:', action);\n    \n    try {\n      // Вызов следующего middleware в цепочке\n      const result = await next(action);\n      \n      console.log('After action:', {\n        action,\n        result,\n      });\n      \n      return result;\n    } catch (error) {\n      console.error('Action error:', error);\n      throw error;\n    }\n  },\n  \n  // Очистка ресурсов при уничтожении хранилища\n  cleanup: () => {\n    console.log('Logging middleware cleanup');\n  }\n});",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Позже добавлю более детализированные примеры",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 104,
            "codeBlocksCount": 2,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Навигация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Все разделы документации",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 27,
                              "url": "./README.md#-документация",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Связанные разделы:",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔌 Создание пользовательских плагинов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 37,
                              "url": "./custom-plugins.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Базовое использование",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 24,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 17,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Навигация"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-18T13:13:14.461Z",
        "wordCount": 278,
        "readingTime": 2,
        "sectionsCount": 2,
        "codeBlocksCount": 2
      }
    },
    "custom-plugins": {
      "title": "Создание пользовательских плагинов",
      "sections": [
        {
          "id": "creating-custom-plugins",
          "title": "Создание пользовательских плагинов",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Плагины в Synapse представляют собой систему обработчиков событий хранилища с определенным жизненным циклом. В отличие от middleware, они не формируют цепочку, а работают как независимые \"наблюдатели\" за операциями хранилища.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { IStoragePlugin, StoragePluginModule } from 'synapse-storage/core';\n\n// Создаем модуль плагинов\nconst plugins = new StoragePluginModule(\n  undefined,      // Родительский модуль плагинов (опционально)\n  console,        // Логгер\n  'appStorage'    // Имя хранилища\n);\n\n// Пример плагина валидации\nclass ValidationPlugin implements IStoragePlugin {\n  name = 'validation';\n  private validators = new Map();\n  private options: any;\n\n  constructor(options = {}) {\n    this.options = options;\n  }\n\n  // Добавление правила валидации для ключа\n  addValidator(key, validator) {\n    this.validators.set(key, validator);\n    return this;\n  }\n\n  // Вызывается перед сохранением значения\n  async onBeforeSet(value, context) {\n    const { key } = context.metadata || {};\n    \n    if (key && this.validators.has(key)) {\n      const validator = this.validators.get(key);\n      const result = validator(value);\n      \n      if (!result.valid) {\n        if (this.options.throwOnInvalid) {\n          throw new Error(`Validation failed for ${key}: ${result.message}`);\n        }\n        \n        this.options.onValidationError?.(key, value, result.message);\n      }\n    }\n    \n    return value;\n  }\n  \n  // Инициализация плагина\n  async initialize() {\n    console.log('Validation plugin initialized');\n  }\n  \n  // Очистка ресурсов\n  async destroy() {\n    this.validators.clear();\n  }\n}\n\n// Добавление плагинов в модуль\nawait plugins.add(new ValidationPlugin({\n  throwOnInvalid: true,\n  onValidationError: (key, value, message) => {\n    console.error(`Validation error: ${message}`);\n  }\n}));\n\n// Создание хранилища с плагинами\nconst storage = await new MemoryStorage(\n  { name: 'app-storage' },\n  plugins  // Передаем модуль плагинов\n).initialize();",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "Жизненный цикл плагинов",
                "level": 4,
                "id": "-"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Плагины имеют следующие методы жизненного цикла:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Инициализация: initialize() - вызывается при добавлении плагина в хранилище",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Операции хранилища:",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "onBeforeSet / onAfterSet - до/после сохранения значения",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "onBeforeGet / onAfterGet - до/после получения значения",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "onBeforeDelete / onAfterDelete - до/после удаления значения",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "onClear - при очистке хранилища",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Уничтожение: destroy() - вызывается при удалении плагина или уничтожении хранилища",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Когда использовать middleware, а когда плагины?",
                "level": 4,
                "id": "-middleware-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Middleware лучше использовать для:",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Перехвата всех операций хранилища в одном месте",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Изменения поведения базовых операций хранилища",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Оптимизации (батчинг, дедупликация)",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Синхронизации между хранилищами/вкладками",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Плагины лучше использовать для:",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered",
                  "children": [
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Обработки конкретных событий хранилища",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Валидации данных",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Логирования операций",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Реализации бизнес-логики, связанной с хранением данных",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    },
                    {
                      "content": [
                        {
                          "type": "paragraph",
                          "data": {
                            "text": "Интеграции с внешними сервисами",
                            "formatting": {
                              "bold": [],
                              "italic": [],
                              "code": [],
                              "links": []
                            }
                          }
                        }
                      ],
                      "level": 1,
                      "type": "unordered"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Позже добавлю более детализированные примеры",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 140,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Навигация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Все разделы документации",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 27,
                              "url": "./README.md#-документация",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Связанные разделы:",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 14,
                              "url": "./middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Создание пользовательских middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 40,
                              "url": "./custom-middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Базовое использование",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 24,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 17,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Навигация"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-18T13:07:23.205Z",
        "wordCount": 385,
        "readingTime": 2,
        "sectionsCount": 2,
        "codeBlocksCount": 1
      }
    },
    "middlewares": {
      "title": "Middlewares",
      "sections": [
        {
          "id": "middlewares",
          "title": "Middlewares",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "Middleware в Synapse работают по принципу \"цепочки обработчиков\" и позволяют перехватывать любые операции хранилища. Каждое middleware может модифицировать действия до и после их обработки базовым хранилищем.",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const counter1 = await new MemoryStorage<Counter>({\n  name: 'counter1',\n  initialState: {\n    value: 100,\n  },\n  middlewares: () => {\n    const broadcast = broadcastMiddleware({\n      storageType: 'memory',  // <-- Важно правильно указывать тип хранилища\n      storageName: 'counter1' // <-- Желательно правильно указывать имя хранилища\n    })\n    return [broadcast]\n  }\n}).initialize()\n\nconst counter2 = await new LocalStorage<Counter>({\n  name: 'counter2',\n  initialState: { value: 100 },\n  middlewares: (getDefaultMiddleware) => {\n    const { shallowCompare } = getDefaultMiddleware()\n\n    const broadcast = broadcastMiddleware({\n      storageType: 'localStorage',\n      storageName: 'counter2'\n    })\n\n    return [broadcast, shallowCompare()]\n  }\n}).initialize()\n\nconst { counter3 } = await IndexedDBStorage.createStorages<{ counter3: Counter }>(\n  'example1', {\n    counter3: {\n      name: 'counter3',\n      initialState: { value: 99 },\n      middlewares: (getDefaultMiddleware) => {\n        const { batching } = getDefaultMiddleware()\n\n        const broadcast = broadcastMiddleware({\n          storageType: 'indexedDB',\n          storageName: 'counter3'\n        })\n        return [\n          broadcast,\n          batching({\n            batchSize: 20,\n            batchDelay: 200\n          })\n        ]\n      }\n    }\n  }\n)",
                "meta": null
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "    // Поверхностное сравнение\n    const updateCounter2 = async () => {\n        await counter2.set('value', counter2ValueSelectorValue! + 1) // Это будет применено\n        await counter2.set('value', counter2ValueSelectorValue! + 1) // |\n        await counter2.set('value', counter2ValueSelectorValue! + 1) // | Не будут вызваны так как payload не изменился\n        await counter2.set('value', counter2ValueSelectorValue! + 1) // |\n        await counter2.set('value', counter2ValueSelectorValue! + 1) // |\n    }\n\n    // Батчинг\n    // !! работает только для методов без await\n    const updateCounter3 = async () => {\n        counter3.set('value', counter3ValueSelectorValue! + 1) // | игнорируется \n        counter3.set('value', counter3ValueSelectorValue! + 1) // | игнорируется\n        counter3.set('value', counter3ValueSelectorValue! + 1) // | игнорируется \n        counter3.set('value', counter3ValueSelectorValue! + 1) // | игнорируется \n        counter3.set('value', counter3ValueSelectorValue! + 10)// | < --- будет применено только это\n    }",
                "meta": null
              }
            },
            {
              "type": "heading",
              "data": {
                "text": "Порядок выполнения middleware",
                "level": 3,
                "id": "-middleware"
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "Middleware выполняются в порядке их объявления в массиве:",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Действие проходит через все middleware сверху вниз",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Затем выполняется базовая операция хранилища",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "Результат проходит через middleware снизу вверх",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": []
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "ordered"
                }
              ]
            },
            {
              "type": "code",
              "data": {
                "language": "text",
                "code": "Action → BroadcastMiddleware → ShallowCompare → Batching → Base Operation\nResult ← BroadcastMiddleware ← ShallowCompare ← Batching ← Base Operation",
                "meta": null
              }
            },
            {
              "type": "blockquote",
              "data": {
                "content": [
                  {
                    "type": "paragraph",
                    "data": {
                      "text": "⚠️ Важно: Порядок middleware имеет значение!",
                      "formatting": {
                        "bold": [],
                        "italic": [],
                        "code": [],
                        "links": []
                      }
                    }
                  },
                  {
                    "type": "list",
                    "data": [
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "BroadcastMiddleware должен быть первым для синхронизации между вкладками",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      },
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "ShallowCompare оптимизирует повторные вызовы",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      },
                      {
                        "content": [
                          {
                            "type": "paragraph",
                            "data": {
                              "text": "Batching группирует операции для производительности",
                              "formatting": {
                                "bold": [],
                                "italic": [],
                                "code": [],
                                "links": []
                              }
                            }
                          }
                        ],
                        "level": 0,
                        "type": "unordered"
                      }
                    ]
                  }
                ],
                "emoji": "⚠"
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 78,
            "codeBlocksCount": 3,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": true,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Навигация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Все разделы документации",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 27,
                              "url": "./README.md#-документация",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Связанные разделы:",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Базовое использование",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 24,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "⚙️ Создание пользовательских middlewares",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 40,
                              "url": "./custom-middlewares.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🔌 Создание пользовательских плагинов",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 37,
                              "url": "./custom-plugins.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 19,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Навигация"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-18T13:13:22.599Z",
        "wordCount": 401,
        "readingTime": 3,
        "sectionsCount": 2,
        "codeBlocksCount": 3
      }
    },
    "redux-selectors": {
      "title": "Создание вычисляемых подписок в стиле Redux",
      "sections": [
        {
          "id": "creating-redux-style-computed-subscriptions",
          "title": "Создание вычисляемых подписок в стиле Redux",
          "level": 1,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { SelectorModule } from 'synapse-storage/core'\n\nconst counter1Selector = new SelectorModule(counter1)\nconst counter2Selector = new SelectorModule(counter2)\nconst counter3Selector = new SelectorModule(counter3)\n\nconst counter1ValueSelector = counter1Selector.createSelector((s) => s.value)\nconst counter2ValueSelector = counter2Selector.createSelector((s) => s.value)\nconst counter3ValueSelector = counter3Selector.createSelector((s) => s.value)\n\nconst sum = counter3Selector.createSelector(\n  [counter1ValueSelector, counter2ValueSelector, counter3ValueSelector],\n  (a,b,c) => a + b + c,\n  // Опционально:\n  // {\n  //   equals: , // Функция сравнения\n  //   name: 'doubledCountSelector' // Имя селектора\n  // }\n)",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "getting-values-from-computed-selectors",
          "title": "Получение значений из вычисляемых селекторов",
          "level": 2,
          "content": [
            {
              "type": "code",
              "data": {
                "language": "jsx",
                "code": "// Нативный способ\n\n// Единоразовое получение\nconst sumValueSelector = sum.select().then(value => value)\n\n// Подписка на изменение\ncounter2ValueSelector.subscribe({\n  notify: (value) => {\n    console.log('counter2ValueSelector', value)\n  }\n})\n\ncounter3ValueSelector.subscribe({\n  notify: (value) => {\n    console.log('counter3ValueSelector', value)\n  }\n})\n\n// Для React через специальный селектор\nconst counter1ValueSelectorValue = useSelector(counter1ValueSelector)\nconst counter2ValueSelectorValue = useSelector(counter2ValueSelector)\nconst counter3ValueSelectorValue = useSelector(counter3ValueSelector, \n  // Можно указать доп опции\n  {\n    initialValue: 99,\n    withLoading: true,\n    equals: (a, b) =>  a !== b\n  })\n// Тогда получать значение так\ncounter3ValueSelectorValue.data\ncounter3ValueSelectorValue.isLoading",
                "meta": null
              }
            },
            {
              "type": "divider",
              "data": {}
            }
          ],
          "metadata": {
            "wordCount": 0,
            "codeBlocksCount": 1,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        },
        {
          "id": "navigation",
          "title": "📚 Навигация",
          "level": 2,
          "content": [
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🏠 Главная",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 10,
                              "url": "./README.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "📖 Все разделы документации",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 27,
                              "url": "./README.md#-документация",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            },
            {
              "type": "heading",
              "data": {
                "text": "Связанные разделы:",
                "level": 3,
                "id": "-"
              }
            },
            {
              "type": "list",
              "data": [
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🚀 Базовое использование",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 24,
                              "url": "./basic-usage.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                },
                {
                  "content": [
                    {
                      "type": "paragraph",
                      "data": {
                        "text": "🛠️ Утилита createSynapse",
                        "formatting": {
                          "bold": [],
                          "italic": [],
                          "code": [],
                          "links": [
                            {
                              "start": 0,
                              "end": 25,
                              "url": "./create-synapse.md",
                              "title": null
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "level": 0,
                  "type": "unordered"
                }
              ]
            }
          ],
          "metadata": {
            "wordCount": 14,
            "codeBlocksCount": 0,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [
        "\udcda Навигация"
      ],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-18T07:24:46.205Z",
        "wordCount": 196,
        "readingTime": 1,
        "sectionsCount": 3,
        "codeBlocksCount": 2
      }
    },
    "storage-creation": {
      "title": "Создание хранилищ",
      "sections": [
        {
          "id": "creating-storage",
          "title": "Создание хранилищ",
          "level": 1,
          "content": [
            {
              "type": "paragraph",
              "data": {
                "text": "MemoryStorage",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "import { IndexedDBStorage, LocalStorage, MemoryStorage } from \"synapse-storage/core\";\n\nconst counter1 = await new MemoryStorage<Counter>({\n  name: 'counter1',\n  initialState: {\n    value: 100,\n  },\n}).initialize()",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "LocalStorage",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const counter2 = await new LocalStorage<Counter>({\n  name: 'counter2',\n  initialState: { value: 100 },\n}).initialize()",
                "meta": null
              }
            },
            {
              "type": "paragraph",
              "data": {
                "text": "IndexedDBStorage",
                "formatting": {
                  "bold": [],
                  "italic": [],
                  "code": [],
                  "links": []
                }
              }
            },
            {
              "type": "code",
              "data": {
                "language": "typescript",
                "code": "const { counter3 } = await IndexedDBStorage.createStorages<{ counter3: Counter }>(\n  'example1', // Название базы данных в indexDB\n  // Таблицы:\n  {\n    counter3: {\n      name: 'counter3',\n      initialState: { value: 99 },\n      // eventEmitter: ,\n      // initialState: ,\n      // middlewares: ,\n      // pluginExecutor: ,\n    },\n    // Другие объекты (хранилища в текущей базе данных)\n  }\n)",
                "meta": null
              }
            }
          ],
          "metadata": {
            "wordCount": 3,
            "codeBlocksCount": 3,
            "diagramsCount": 0,
            "tasksCount": 0,
            "hasTable": false,
            "hasBlockquotes": false,
            "hasTasks": false
          }
        }
      ],
      "features": [],
      "frontMatter": {},
      "metadata": {
        "lastModified": "2025-06-20T06:41:09.504Z",
        "wordCount": 107,
        "readingTime": 1,
        "sectionsCount": 1,
        "codeBlocksCount": 3
      }
    }
  }
}